#Использовать fs
#Использовать "../src/core"

Перем РаботаССУБД;        //    - объект работы с СУБД
Перем ПрефиксИмениБД;     //    - префикс имен тестовых баз

Перем Лог;                //    - логгер

// Процедура выполняется после запуска теста
//
Процедура ПередЗапускомТеста() Экспорт
	
	Сервер = ПолучитьПеременнуюСреды("CPDB_SQL_SERVER");
	ИмяПользователя = ПолучитьПеременнуюСреды("CPDB_SQL_USER");
	ПарольПользователя = ПолучитьПеременнуюСреды("CPDB_SQL_PWD");

	ПрефиксИмениБД = "cpdb_test_db";

	ПодключениеКСУБД = Новый ПодключениеКСУБД(Сервер, ИмяПользователя, ПарольПользователя);
	
	РаботаССУБД = Новый РаботаССУБД(ПодключениеКСУБД);

	Для й = 1 По 10 Цикл
		ИмяБазы = СтрШаблон("%1%2", ПрефиксИмениБД, й);

		Если НЕ РаботаССУБД.БазаСуществует(ИмяБазы) Тогда
			Продолжить;
		КонецЕсли;

		РаботаССУБД.УдалитьБазуДанных(ИмяБазы);
	КонецЦикла;

	Лог = ПараметрыСистемы.Лог();
	Лог.УстановитьУровень(УровниЛога.Отладка);

КонецПроцедуры // ПередЗапускомТеста()

// Процедура выполняется после запуска теста
//
Процедура ПослеЗапускаТеста() Экспорт

КонецПроцедуры // ПослеЗапускаТеста()

&Тест
Процедура ТестДолжен_ПолучитьВерсиюSQLServer() Экспорт

	ВремКаталог = ОбъединитьПути(ТекущийСценарий().Каталог, "..", "testdata");
	ФС.ОбеспечитьКаталог(ВремКаталог);
	ПутьКСкрипту = ОбъединитьПути(ВремКаталог, "test.sql");
	Скрипт = Новый ТекстовыйДокумент();
	Скрипт.ДобавитьСтроку("SELECT @@VERSION");
	Скрипт.Записать(ПутьКСкрипту);

	Результат = РаботаССУБД.ВыполнитьСкрипты(ПутьКСкрипту);

	ТекстОшибки = СтрШаблон("Ошибка получения версии MS SQL Server");

	Утверждения.ПроверитьБольше(СтрНайти(Результат, "Microsoft SQL Server"), 0, ТекстОшибки);

	УдалитьФайлы(ВремКаталог);

КонецПроцедуры // ТестДолжен_ПолучитьВерсиюSQLServer()

&Тест
Процедура ТестДолжен_СоздатьБазуДанных() Экспорт

	ИмяБД = СтрШаблон("%1%2", ПрефиксИмениБД, 1);
	МодельВосстановления = "SIMPLE";

	РаботаССУБД.СоздатьБазуДанных(ИмяБД, МодельВосстановления);

	ТекстОшибки = СтрШаблон("Ошибка создания базы данных ""%1""", ИмяБД);

	Утверждения.ПроверитьИстину(РаботаССУБД.БазаСуществует(ИмяБД), ТекстОшибки);

	РаботаССУБД.УдалитьБазуДанных(ИмяБД);

КонецПроцедуры // ТестДолжен_СоздатьБазуДанных()

&Тест
Процедура ТестДолжен_УдалитьБазуДанных() Экспорт

	ИмяБД = СтрШаблон("%1%2", ПрефиксИмениБД, 2);
	МодельВосстановления = "SIMPLE";

	РаботаССУБД.СоздатьБазуДанных(ИмяБД, МодельВосстановления);

	ТекстОшибки = СтрШаблон("Ошибка создания базы данных ""%1""", ИмяБД);

	Утверждения.ПроверитьИстину(РаботаССУБД.БазаСуществует(ИмяБД), ТекстОшибки);

	РаботаССУБД.УдалитьБазуДанных(ИмяБД);

	ТекстОшибки = СтрШаблон("Ошибка удаления базы данных ""%1""", ИмяБД);

	Утверждения.ПроверитьЛожь(РаботаССУБД.БазаСуществует(ИмяБД), ТекстОшибки);

КонецПроцедуры // ТестДолжен_УдалитьБазуДанных()

&Тест
Процедура ТестДолжен_СоздатьРезервнуюКопиюБазы() Экспорт

	ИмяБД = СтрШаблон("%1%2", ПрефиксИмениБД, 3);
	МодельВосстановления = "SIMPLE";

	РаботаССУБД.СоздатьБазуДанных(ИмяБД, МодельВосстановления);

	ТекстОшибки = СтрШаблон("Ошибка создания базы данных ""%1""", ИмяБД);

	Утверждения.ПроверитьИстину(РаботаССУБД.БазаСуществует(ИмяБД), ТекстОшибки);

	ВремКаталог = ОбъединитьПути(ТекущийСценарий().Каталог, "..", "testdata");
	ФС.ОбеспечитьКаталог(ВремКаталог);
	ПутьКРезервнойКопии = ОбъединитьПути(ВремКаталог, СтрШаблон("%1.bak", ИмяБД));

	РаботаССУБД.ВыполнитьРезервноеКопирование(ИмяБД, ПутьКРезервнойКопии);

	ВремФайл = Новый Файл(ПутьКРезервнойКопии);

	ТекстОшибки = СтрШаблон("Ошибка резервного копирования базы ""%1"" в файл ""%2""", ИмяБД, ПутьКРезервнойКопии);

	Утверждения.ПроверитьИстину(ВремФайл.Существует(), ТекстОшибки);

	РаботаССУБД.УдалитьБазуДанных(ИмяБД);

	УдалитьФайлы(ВремКаталог);

КонецПроцедуры // ТестДолжен_СоздатьРезервнуюКопиюБазы()

&Тест
Процедура ТестДолжен_ВосстановитьБазуИзРезервнойКопии() Экспорт

	ИмяБД = СтрШаблон("%1%2", ПрефиксИмениБД, 4);
	МодельВосстановления = "SIMPLE";

	РаботаССУБД.СоздатьБазуДанных(ИмяБД, МодельВосстановления);

	ТекстОшибки = СтрШаблон("Ошибка создания базы данных ""%1""", ИмяБД);

	Утверждения.ПроверитьИстину(РаботаССУБД.БазаСуществует(ИмяБД), ТекстОшибки);

	ВремКаталог = ОбъединитьПути(ТекущийСценарий().Каталог, "..", "testdata");
	ФС.ОбеспечитьКаталог(ВремКаталог);
	ПутьКРезервнойКопии = ОбъединитьПути(ВремКаталог, СтрШаблон("%1.bak", ИмяБД));

	РаботаССУБД.ВыполнитьРезервноеКопирование(ИмяБД, ПутьКРезервнойКопии);

	ВремФайл = Новый Файл(ПутьКРезервнойКопии);

	ТекстОшибки = СтрШаблон("Ошибка резервного копирования базы ""%1"" в файл ""%2""", ИмяБД, ПутьКРезервнойКопии);

	Утверждения.ПроверитьИстину(ВремФайл.Существует(), ТекстОшибки);

	РаботаССУБД.УдалитьБазуДанных(ИмяБД);

	ИмяБД = СтрШаблон("%1%2", ПрефиксИмениБД, 5);
	ПутьКФайлуДанных = ОбъединитьПути(ВремКаталог, СтрШаблон("%1.mdf", ИмяБД));
	ПутьКФайлуЖурнала = ОбъединитьПути(ВремКаталог, СтрШаблон("%1_log.ldf", ИмяБД));

	РаботаССУБД.ВыполнитьВосстановление(ИмяБД,
	                                    ПутьКРезервнойКопии,
	                                    ВремКаталог,
	                                    ВремКаталог,
	                                    Истина);
	
	ТекстОшибки = СтрШаблон("Ошибка восстановления базы ""%1"" из резервной копии ""%2""", ИмяБД, ПутьКРезервнойКопии);

	Утверждения.ПроверитьИстину(РаботаССУБД.БазаСуществует(ИмяБД), ТекстОшибки);

	РаботаССУБД.УдалитьБазуДанных(ИмяБД);

	УдалитьФайлы(ВремКаталог);

КонецПроцедуры // ТестДолжен_ВосстановитьБазуИзРезервнойКопии()

