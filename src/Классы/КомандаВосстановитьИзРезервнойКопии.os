
///////////////////////////////////////////////////////////////////////////////////////////////////
// Прикладной интерфейс

Перем Лог;

// Интерфейсная процедура, выполняет регистрацию команды и настройку парсера командной строки
//   
// Параметры:
//   ИмяКоманды 	- Строка										- Имя регистрируемой команды
//   Парсер 		- ПарсерАргументовКоманднойСтроки (cmdline)		- Парсер командной строки
//
Процедура ЗарегистрироватьКоманду(Знач ИмяКоманды, Знач Парсер) Экспорт
	
	ОписаниеКоманды = Парсер.ОписаниеКоманды(ИмяКоманды, "Восстановить базу MS SQL из резервной копии");

	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, 
		"-params",
		"Файлы JSON содержащие значения параметров,
		|могут быть указаны несколько файлов разделенные "";""
		|(параметры командной строки имеют более высокий приоритет)");

	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, 
		"-sql-srvr",
		"Адрес сервера MS SQL");
	
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, 
		"-sql-user",
		"Пользователь сервера");
		
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, 
		"-sql-pwd",
		"Пароль пользователя сервера");

	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, 
		"-sql-db",
		"Имя базы для восстановления");
	
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, 
		"-bak-path",
		"Путь к резервной копии");

	Парсер.ДобавитьПараметрФлагКоманды(ОписаниеКоманды, 
		"-create-db",
		"Создать базу в случае отсутствия");

	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, 
		"-db-owner",
		"Имя владельца базы после восстановления");

	Парсер.ДобавитьПараметрФлагКоманды(ОписаниеКоманды, 
		"-compress-db",
		"Включить компрессию страниц таблиц и индексов после восстановления");

	Парсер.ДобавитьПараметрФлагКоманды(ОписаниеКоманды, 
		"-shrink-db",
		"Сжать базу после восстановления");

	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, 
		"-db-path",
		"Путь к каталогу файлов данных базы после восстановления");

	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, 
		"-db-logpath",
		"Путь к каталогу файлов журнала после восстановления");

	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, 
		"-db-recovery",
		"Установить модель восстановления (RECOVERY MODEL), возможные значения ""FULL"", ""SIMPLE"",""BULK_LOGGED""");

	Парсер.ДобавитьПараметрФлагКоманды(ОписаниеКоманды, 
		"-db-changelfn",
		"Изменить логические имена файлов (LFN) базы, в соответствии с именем базы");

	Парсер.ДобавитьПараметрФлагКоманды(ОписаниеКоманды, 
		"-delsrc",
		"Удалить файл резервной копии после восстановления");

	Парсер.ДобавитьКоманду(ОписаниеКоманды);

КонецПроцедуры // ЗарегистрироватьКоманду()

// Интерфейсная процедура, выполняет текущую команду
//   
// Параметры:
//   ПараметрыКоманды 	- Соответствие						- Соответствие параметров команды и их значений
//
// Возвращаемое значение:
//	Число - код возврата команды
//
Функция ВыполнитьКоманду(Знач ПараметрыКоманды) Экспорт
    
	ЗапускПриложений.ПрочитатьПараметрыКомандыИзФайла(ПараметрыКоманды["-params"], ПараметрыКоманды);
	
	Сервер					= ПараметрыКоманды["-sql-srvr"];
	База					= ПараметрыКоманды["-sql-db"];
	Пользователь			= ПараметрыКоманды["-sql-user"];
	ПарольПользователя		= ПараметрыКоманды["-sql-pwd"];
	ПутьКРезервнойКопии		= ПараметрыКоманды["-bak-path"];
	СоздаватьБазу			= ПараметрыКоманды["-create-db"];
	ВладелецБазы			= ПараметрыКоманды["-db-owner"];
	ВключитьКомпрессию		= ПараметрыКоманды["-compress-db"];
	СжатьБазу				= ПараметрыКоманды["-shrink-db"];
	ПутьКФайлуДанных		= ПараметрыКоманды["-db-path"];
	ПутьКФайлуЖурнала		= ПараметрыКоманды["-db-logpath"];
	МодельВосстановления	= ПараметрыКоманды["-db-recovery"];
	ИзменитьЛИФ				= ПараметрыКоманды["-db-changelfn"];
	УдалитьИсточник			= ПараметрыКоманды["-delsrc"];

	ВозможныйРезультат = МенеджерКомандПриложения.РезультатыКоманд();

	Если ПустаяСтрока(Сервер) Тогда
		Лог.Ошибка("Не указан сервер MS SQL");
		Возврат ВозможныйРезультат.НеверныеПараметры;
	КонецЕсли;

	Если ПустаяСтрока(База) Тогда
		Лог.Ошибка("Не указана база для восстановления");
		Возврат ВозможныйРезультат.НеверныеПараметры;
	КонецЕсли;

	Если ПустаяСтрока(ПутьКРезервнойКопии) Тогда
		Лог.Ошибка("Не задан путь к резервной копии");
		Возврат ВозможныйРезультат.НеверныеПараметры;
	КонецЕсли;

	Если ПустаяСтрока(ПутьКФайлуДанных) Тогда
		Лог.Ошибка("Не задан путь к каталогу файлов данных");
		Возврат ВозможныйРезультат.НеверныеПараметры;
	КонецЕсли;

	Если ПустаяСтрока(ПутьКФайлуЖурнала) Тогда
		Лог.Ошибка("Не задан путь к каталогу файлов журнала");
		Возврат ВозможныйРезультат.НеверныеПараметры;
	КонецЕсли;

	Инструменты = Новый ИнструментыСУБД;

	ОписаниеРезультата = "";
	
	Попытка
		Инструменты.Инициализировать(Сервер, Пользователь, ПарольПользователя);
	Исключение
		Лог.Ошибка("Ошибка при инициализации инструментов СУБД: " + ОписаниеОшибки());
		Возврат ВозможныйРезультат.ОшибкаВремениВыполнения;
	КонецПопытки;

	Лог.Информация("Начало восстановления базы ""%1"" из резервной копии ""%2"": %3"
					, База
					, ПутьКРезервнойКопии
					, ОписаниеРезультата);

	Попытка
	
		Результат = Инструменты.ВосстановитьИзРезервнойКопии(База
														   , ПутьКРезервнойКопии
														   , ПутьКФайлуДанных
														   , ПутьКФайлуЖурнала
														   , СоздаватьБазу
														   , ОписаниеРезультата);

		Если Результат Тогда
			Лог.Информация("Выполнено восстановление базы ""%1"" из резервной копии ""%2"": %3"
						, База
						, ПутьКРезервнойКопии
						, ОписаниеРезультата);
		Иначе
			Лог.Ошибка("Ошибка восстановления базы ""%1"" из резервной копии ""%2"": %3"
						, База
						, ПутьКРезервнойКопии
						, ОписаниеРезультата);
			Возврат ВозможныйРезультат.ОшибкаВремениВыполнения;
		КонецЕсли;

	Исключение
		Лог.Ошибка("Ошибка восстановления базы ""%1"" из резервной копии ""%2"": %3"
				 , База
				 , ПутьКРезервнойКопии
				 , ОписаниеОшибки() + ?(ЗначениеЗаполнено(ОписаниеРезультата), Символы.ПС + ОписаниеРезультата, ""));
		Возврат ВозможныйРезультат.ОшибкаВремениВыполнения;
	КонецПопытки;

	Если УдалитьИсточник Тогда
		Попытка
			УдалитьФайлы(ПутьКРезервнойКопии);
			Лог.Информация("Исходный файл %1 удален", ПутьКРезервнойКопии);
		Исключение
			Лог.Ошибка("Ошибка удаления файла %1: %2", ПутьКРезервнойКопии, ОписаниеОшибки());
			Возврат ВозможныйРезультат.ОшибкаВремениВыполнения;
		КонецПопытки;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВладелецБазы) Тогда
		Попытка
			Результат = Инструменты.УстановитьВладельцаБазы(База, ВладелецБазы);

			Если НЕ Результат Тогда
				Лог.Ошибка("Ошибка смены владельца базы ""%1"" на ""%2"""
						, База
						, ВладелецБазы);
				Возврат ВозможныйРезультат.ОшибкаВремениВыполнения;
			КонецЕсли;
	
			Лог.Информация("Для базы ""%1"" установлен новый владелец ""%2"""
						, База
						, ВладелецБазы);
		Исключение
			Лог.Ошибка("Ошибка смены владельца базы ""%1"" на ""%2"": %3"
					, База
					, ВладелецБазы
					, ОписаниеОшибки());
			Возврат ВозможныйРезультат.ОшибкаВремениВыполнения;
		КонецПопытки;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(МодельВосстановления) Тогда
		Попытка
			Результат = Инструменты.УстановитьМодельВосстановления(База, МодельВосстановления);

			Если НЕ Результат Тогда
				Лог.Ошибка("Ошибка смены модели восстановления базы ""%1"" на ""%2"""
						, База
						, МодельВосстановления);
				Возврат ВозможныйРезультат.ОшибкаВремениВыполнения;
			КонецЕсли;
	
			Лог.Информация("Для базы ""%1"" установлена модель восстановления ""%2"""
						, База
						, МодельВосстановления);
		Исключение
			Лог.Ошибка("Ошибка смены модели восстановления базы ""%1"" на ""%2"": %3"
					, База
					, МодельВосстановления
					, ОписаниеОшибки());
			Возврат ВозможныйРезультат.ОшибкаВремениВыполнения;
		КонецПопытки;
	КонецЕсли;
	
	Если ИзменитьЛИФ Тогда
		Попытка
			ЛИФ = Инструменты.ПолучитьЛогическоеИмяФайлаВБазе(База, "ROWS");
			НовоеЛИФ = База;
			Результат = Инструменты.ИзменитьЛогическоеИмяФайлаБазы(База, ЛИФ, НовоеЛИФ);

			Если НЕ Результат Тогда
				Лог.Ошибка("Ошибка изменения логического имени файла данных ""%1"" в базе ""%2"""
						, ЛИФ
						, База);
				Возврат ВозможныйРезультат.ОшибкаВремениВыполнения;
			КонецЕсли;
	
			Лог.Информация("Для базы ""%1"" изменено логическое имя файла данных ""%2"" на ""%3"""
						, База
						, ЛИФ
						, НовоеЛИФ);
		Исключение
			Лог.Ошибка("Ошибка изменения логического имени файла данных ""%1"" в базе ""%2"": %3"
					, ЛИФ
					, База
					, ОписаниеОшибки());
			Возврат ВозможныйРезультат.ОшибкаВремениВыполнения;
		КонецПопытки;
		
		Попытка
			ЛИФ = Инструменты.ПолучитьЛогическоеИмяФайлаВБазе(База, "LOG");
			НовоеЛИФ = База + "_log";
			Результат = Инструменты.ИзменитьЛогическоеИмяФайлаБазы(База, ЛИФ, НовоеЛИФ);

			Если НЕ Результат Тогда
				Лог.Ошибка("Ошибка изменения логического имени файла журнала ""%1"" в базе ""%2"""
						, ЛИФ
						, База);
				Возврат ВозможныйРезультат.ОшибкаВремениВыполнения;
			КонецЕсли;
	
			Лог.Информация("Для базы ""%1"" изменено логическое имя файла журнала ""%2"" на ""%3"""
						, База
						, ЛИФ
						, НовоеЛИФ);
		Исключение
			Лог.Ошибка("Ошибка изменения логического имени файла журнала ""%1"" в базе ""%2"": %3"
					, ЛИФ
					, База
					, ОписаниеОшибки());
			Возврат ВозможныйРезультат.ОшибкаВремениВыполнения;
		КонецПопытки;
	КонецЕсли;
	
	Если ВключитьКомпрессию Тогда
		
		Лог.Информация("Начало компрессии страниц базы ""%1""", База);
		
		Попытка
			Результат = Инструменты.ВключитьКомпрессиюСтраниц(База);

			Если НЕ Результат Тогда
				Лог.Ошибка("Ошибка включения компрессии страниц в базе ""%1""", База);
				Возврат ВозможныйРезультат.ОшибкаВремениВыполнения;
			КонецЕсли;
	
			Лог.Информация("Включена компрессия страниц в базе ""%1""", База);
		Исключение
			Лог.Ошибка("Ошибка включения компрессии страниц в базе ""%1"": ""%2""", База, ОписаниеОшибки());
			Возврат ВозможныйРезультат.ОшибкаВремениВыполнения;
		КонецПопытки;
	КонецЕсли;
	
	Если СжатьБазу Тогда

		Лог.Информация("Начало сжатия (shrink) базы ""%1""", База);
		
		Попытка
			Результат = Инструменты.СжатьБазу(База);

			Если НЕ Результат Тогда
				Лог.Ошибка("Ошибка сжатия базы ""%1""", База);
				Возврат ВозможныйРезультат.ОшибкаВремениВыполнения;
			КонецЕсли;
	
			Лог.Информация("Выполнено сжатие базы ""%1""", База);
		Исключение
			Лог.Ошибка("Ошибка сжатия базы ""%1"": ""%2""", База, ОписаниеОшибки());
			Возврат ВозможныйРезультат.ОшибкаВремениВыполнения;
		КонецПопытки;
	КонецЕсли;
	
	Возврат ВозможныйРезультат.Успех;

КонецФункции // ВыполнитьКоманду()

Лог = Логирование.ПолучитьЛог("ktb.app.cpdb");