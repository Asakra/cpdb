
///////////////////////////////////////////////////////////////////////////////////////////////////
// Прикладной интерфейс

Перем Лог;
Перем ИспользуемаяВерсияПлатформы;

// Интерфейсная процедура, выполняет регистрацию команды и настройку парсера командной строки
//   
// Параметры:
//   ИмяКоманды 	- Строка										- Имя регистрируемой команды
//   Парсер 		- ПарсерАргументовКоманднойСтроки (cmdline)		- Парсер командной строки
//
Процедура ЗарегистрироватьКоманду(Знач ИмяКоманды, Знач Парсер) Экспорт
	
	ОписаниеКоманды = Парсер.ОписаниеКоманды(ИмяКоманды, "Создает ИБ в кластере серверов 1С");

	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, 
		"-params",
		"Файлы JSON содержащие значения параметров,
		|могут быть указаны несколько файлов разделенные "";""
		|(параметры командной строки имеют более высокий приоритет)");

	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, 
		"-ib-srvr",
		"Адрес кластера серверов 1С ([<протокол>://]<адрес>[:<порт>])");

	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, 
		"-ib-ref",
		"Имя базы в кластере 1С");

	Парсер.ДобавитьПараметрФлагКоманды(ОписаниеКоманды, 
		"-errifexist",
		"Сообщить об ошибке если ИБ в кластере 1С существует");

	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, 
		"-dbms",
		"Тип сервера СУБД (MSSQLServer <по умолчанию>; PostgreSQL; IBMDB2; OracleDatabase)");

	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, 
		"-db-srvr",
		"Адрес сервера СУБД");

	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, 
		"-db-user",
		"Пользователь сервера СУБД");
	
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, 
		"-db-pwd",
		"Пароль пользователя сервера СУБД");

	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, 
		"-db-name",
		"Имя базы на сервере СУБД");

	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, 
		"-sql-offs",
		"Смещение дат на сервере MS SQL (0; 2000 <по умолчанию>)");

	Парсер.ДобавитьПараметрФлагКоманды(ОписаниеКоманды, 
		"-createdb",
		"Создавать базу данных в случае отсутствия");

	Парсер.ДобавитьПараметрФлагКоманды(ОписаниеКоманды, 
		"-allowschjob",
		"Разрешить регламентные задания");

	Парсер.ДобавитьПараметрФлагКоманды(ОписаниеКоманды, 
		"-allowlicdstr",
		"Разрешить выдачу лицензий сервером 1С");

	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, 
		"-cadm-user",
		"Имя администратора кластера");

	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, 
		"-cadm-pwd",
		"Пароль администратора кластера");

	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, 
		"-nameinlist",
		"Имя в списке баз пользователя (если не задано, то ИБ в список не добавляется)");

	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, 
		"-tmplt-path",
		"Путь к шаблону для создания информационной базы (*.cf; *.dt). Если шаблон не указан, то будет создана пустая ИБ");

	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, 
    	"-v8version",
    	"Маска версии платформы 1С");

    Парсер.ДобавитьКоманду(ОписаниеКоманды);

КонецПроцедуры // ЗарегистрироватьКоманду()

// Интерфейсная процедура, выполняет текущую команду
//   
// Параметры:
//   ПараметрыКоманды 	- Соответствие						- Соответствие параметров команды и их значений
//
// Возвращаемое значение:
//	Число - код возврата команды
//
Функция ВыполнитьКоманду(Знач ПараметрыКоманды) Экспорт
    
	ЗапускПриложений.ПрочитатьПараметрыКомандыИзФайла(ПараметрыКоманды["-params"], ПараметрыКоманды);
	
	Параметры1С				= Новый Структура();
	ПараметрыСУБД			= Новый Структура();
	АвторизацияВКластере	= Новый Структура();

	Параметры1С.Вставить("Сервер1С"               , ПараметрыКоманды["-ib-srvr"]);
	Параметры1С.Вставить("ИмяИБ"                  , ПараметрыКоманды["-ib-ref"]);
	Параметры1С.Вставить("РазрешитьВыдачуЛицензий", ПараметрыКоманды["-allowlicdstr"]);
	Параметры1С.Вставить("РазрешитьРегЗадания"    , ПараметрыКоманды["-allowschjob"]);

	ПараметрыСУБД.Вставить("ТипСУБД"         , ПараметрыКоманды["-dbms"]);
	ПараметрыСУБД.Вставить("СерверСУБД"      , ПараметрыКоманды["-db-srvr"]);
	ПараметрыСУБД.Вставить("ПользовательСУБД", ПараметрыКоманды["-db-user"]);
	ПараметрыСУБД.Вставить("ПарольСУБД"      , ПараметрыКоманды["-db-pwd"]);
	ПараметрыСУБД.Вставить("ИмяБД"           , ПараметрыКоманды["-db-name"]);
	ПараметрыСУБД.Вставить("СмещениеДат"     , ПараметрыКоманды["-sql-offs"]);
	ПараметрыСУБД.Вставить("СоздаватьБД"     , ПараметрыКоманды["-createdb"]);
	
	АвторизацияВКластере.Вставить("Имя"   , ПараметрыКоманды["-cadm-user"]);
	АвторизацияВКластере.Вставить("Пароль", ПараметрыКоманды["-cadm-pwd"]);
	
	ИмяВСпискеБаз			= ПараметрыКоманды["-nameinlist"];
	ПутьКШаблону			= ПараметрыКоманды["-tmplt-path"];
	ОшибкаЕслиСуществует	= ПараметрыКоманды["-errifexist"];
	
	ИспользуемаяВерсияПлатформы = ПараметрыКоманды["-v8version"];
	
	ВозможныйРезультат = МенеджерКомандПриложения.РезультатыКоманд();

	Если ПустаяСтрока(Параметры1С.Сервер1С) Тогда
		Лог.Ошибка("Не указан адрес кластера серверов 1С");
		Возврат ВозможныйРезультат.НеверныеПараметры;
	КонецЕсли;

	Если ПустаяСтрока(Параметры1С.ИмяИБ) Тогда
		Лог.Ошибка("Не указано имя базы в кластере 1С");
		Возврат ВозможныйРезультат.НеверныеПараметры;
	КонецЕсли;

	Если ПустаяСтрока(ПараметрыСУБД.ТипСУБД) Тогда
		ПараметрыСУБД.ТипСУБД = "MSSQLServer";
	КонецЕсли;

	Если ПустаяСтрока(ПараметрыСУБД.СерверСУБД) Тогда
		Лог.Ошибка("Не указан адрес сервера СУБД");
		Возврат ВозможныйРезультат.НеверныеПараметры;
	КонецЕсли;

	Если ПустаяСтрока(ПараметрыСУБД.ПользовательСУБД) Тогда
		Лог.Ошибка("Не указан пользователь сервера СУБД");
		Возврат ВозможныйРезультат.НеверныеПараметры;
	КонецЕсли;

	Если ПустаяСтрока(ПараметрыСУБД.ИмяБД) Тогда
		ПараметрыСУБД.ИмяБД = Параметры1С.ИмяИБ;
		Лог.Информация("Не указано имя базы на сервере СУБД, будет использовано имя ИБ - ""%1""", ПараметрыСУБД.ИмяБД);
	КонецЕсли;

	Если ПустаяСтрока(ПараметрыСУБД.СмещениеДат) Тогда
		ПараметрыСУБД.СмещениеДат = "2000";
	КонецЕсли;

	Попытка
		УправлениеКонфигуратором = Новый УправлениеКонфигуратором();
		УправлениеКонфигуратором.СоздатьСервернуюБазу(Параметры1С
													, ПараметрыСУБД
													, АвторизацияВКластере
													, ОшибкаЕслиСуществует
													, ПутьКШаблону
													, ИмяВСпискеБаз);

		Возврат ВозможныйРезультат.Успех;
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Лог.Ошибка(ТекстОшибки);
		Возврат ВозможныйРезультат.ОшибкаВремениВыполнения;
	КонецПопытки;

КонецФункции // ВыполнитьКоманду()

Лог = Логирование.ПолучитьЛог("ktb.app.cpdb");