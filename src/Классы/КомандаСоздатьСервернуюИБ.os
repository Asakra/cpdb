
///////////////////////////////////////////////////////////////////////////////////////////////////
// Прикладной интерфейс

Перем Лог;
Перем ИспользуемаяВерсияПлатформы;

// Интерфейсная процедура, выполняет регистрацию команды и настройку парсера командной строки
//   
// Параметры:
//   ИмяКоманды 	- Строка										- Имя регистрируемой команды
//   Парсер 		- ПарсерАргументовКоманднойСтроки (cmdline)		- Парсер командной строки
//
Процедура ЗарегистрироватьКоманду(Знач ИмяКоманды, Знач Парсер) Экспорт
	
	ОписаниеКоманды = Парсер.ОписаниеКоманды(ИмяКоманды, "Создает ИБ в кластере серверов 1С");

	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, 
		"-params",
		"Файлы JSON содержащие значения параметров,
		|могут быть указаны несколько файлов разделенные "";""
		|(параметры командной строки имеют более высокий приоритет)");

	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, 
		"-ib-srvr",
		"Адрес кластера серверов 1С ([<протокол>://]<адрес>[:<порт>])");

	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, 
		"-ib-ref",
		"Имя базы в кластере 1С");

	Парсер.ДобавитьПараметрФлагКоманды(ОписаниеКоманды, 
		"-errifexist",
		"Сообщить об ошибке если ИБ в кластере 1С существует");

	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, 
		"-dbms",
		"Тип сервера СУБД (MSSQLServer <по умолчанию>; PostgreSQL; IBMDB2; OracleDatabase)");

	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, 
		"-db-srvr",
		"Адрес сервера СУБД");

	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, 
		"-db-user",
		"Пользователь сервера СУБД");
	
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, 
		"-db-pwd",
		"Пароль пользователя сервера СУБД");

	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, 
		"-db-name",
		"Имя базы на сервере СУБД");

	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, 
		"-sql-offs",
		"Смещение дат на сервере MS SQL (0; 2000 <по умолчанию>)");

	Парсер.ДобавитьПараметрФлагКоманды(ОписаниеКоманды, 
		"-createdb",
		"Создавать базу данных в случае отсутствия");

	Парсер.ДобавитьПараметрФлагКоманды(ОписаниеКоманды, 
		"-allowschjob",
		"Разрешить регламентные задания");

	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, 
		"-cadm-user",
		"Имя администратора кластера");

	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, 
		"-cadm-pwd",
		"Пароль администратора кластера");

	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, 
		"-nameinlist",
		"Имя в списке баз пользователя (если не задано, то ИБ в список не добавляется)");

	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, 
		"-tmplt-path",
		"Путь к шаблону для создания информационной базы (*.cf; *.dt). Если шаблон не указан, то будет создана пустая ИБ");

	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, 
    	"-v8version",
    	"Маска версии платформы 1С");

    Парсер.ДобавитьКоманду(ОписаниеКоманды);

КонецПроцедуры //ЗарегистрироватьКоманду()

// Интерфейсная процедура, выполняет текущую команду
//   
// Параметры:
//   ПараметрыКоманды 	- Соответствие						- Соответствие параметров команды и их значений
//
// Возвращаемое значение:
//	Число - код возврата команды
//
Функция ВыполнитьКоманду(Знач ПараметрыКоманды) Экспорт
    
	ЗапускПриложений.ПрочитатьПараметрыКомандыИзФайла(ПараметрыКоманды["-params"], ПараметрыКоманды);
	
	Сервер1С					= ПараметрыКоманды["-ib-srvr"];
	ИмяИБ						= ПараметрыКоманды["-ib-ref"];
	ОшибкаЕслиСуществует		= ПараметрыКоманды["-errifexist"];
	ТипСУБД						= ПараметрыКоманды["-dbms"];
	СерверСУБД					= ПараметрыКоманды["-db-srvr"];
	ПользовательСУБД			= ПараметрыКоманды["-db-user"];
	ПарольСУБД					= ПараметрыКоманды["-db-pwd"];
	ИмяБД						= ПараметрыКоманды["-db-name"];
	СмещениеДат					= ПараметрыКоманды["-sql-offs"];
	СоздаватьБД					= ПараметрыКоманды["-createdb"];
	РазрешитьРегЗадания			= ПараметрыКоманды["-allowschjob"];
	АдминистраторКластера		= ПараметрыКоманды["-cadm-user"];
	ПарольКластера				= ПараметрыКоманды["-cadm-pwd"];
	ИмяВСпискеБаз				= ПараметрыКоманды["-nameinlist"];
	ПутьКШаблону				= ПараметрыКоманды["-tmplt-path"];
	ИспользуемаяВерсияПлатформы	= ПараметрыКоманды["-v8version"];
	
	ВозможныйРезультат = МенеджерКомандПриложения.РезультатыКоманд();

	Если ПустаяСтрока(Сервер1С) Тогда
		Лог.Ошибка("Не указан адрес кластера серверов 1С");
		Возврат ВозможныйРезультат.НеверныеПараметры;
	КонецЕсли;

	Если ПустаяСтрока(ИмяИБ) Тогда
		Лог.Ошибка("Не указано имя базы в кластере 1С");
		Возврат ВозможныйРезультат.НеверныеПараметры;
	КонецЕсли;

	Если ПустаяСтрока(ТипСУБД) Тогда
		ТипСУБД = "MSSQLServer";
	КонецЕсли;

	Если ПустаяСтрока(СерверСУБД) Тогда
		Лог.Ошибка("Не указан адрес сервера СУБД");
		Возврат ВозможныйРезультат.НеверныеПараметры;
	КонецЕсли;

	Если ПустаяСтрока(ПользовательСУБД) Тогда
		Лог.Ошибка("Не указан пользователь сервера СУБД");
		Возврат ВозможныйРезультат.НеверныеПараметры;
	КонецЕсли;

	Если ПустаяСтрока(ИмяБД) Тогда
		ИмяБД = ИмяИБ;
		Лог.Информация("Не указано имя базы на сервере СУБД, будет использовано имя ИБ - """ + ИмяБД + """");
	КонецЕсли;

	Если ПустаяСтрока(СмещениеДат) Тогда
		СмещениеДат = "2000";
	КонецЕсли;

	Попытка
		УправлениеКонфигуратором = Новый УправлениеКонфигуратором();
		УправлениеКонфигуратором.СоздатьСервернуюБазу(Сервер1С
													, ИмяИБ
													, ТипСУБД
													, СерверСУБД
													, ПользовательСУБД
													, ПарольСУБД
													, ИмяБД
													, СмещениеДат
													, СоздаватьБД
													, РазрешитьРегЗадания
													, АдминистраторКластера
													, ПарольКластера
													, ИмяВСпискеБаз
													, ПутьКШаблону
													, ОшибкаЕслиСуществует);

		Возврат ВозможныйРезультат.Успех;
	Исключение
		Лог.Ошибка(ОписаниеОшибки());
		Возврат ВозможныйРезультат.ОшибкаВремениВыполнения;
	КонецПопытки;

КонецФункции //ВыполнитьКоманду()

Процедура СоздатьСервернуюИБ(Знач Сервер1С
						   , Знач ИмяИБ
						   , Знач ТипСУБД = "MSSQLServer"
						   , Знач СерверСУБД
						   , Знач ПользовательСУБД
						   , Знач ПарольСУБД = ""
						   , Знач ИмяБД
						   , Знач СмещениеДат = "2000"
						   , Знач СоздаватьБД = Ложь
						   , Знач РазрешитьРегЗадания = Ложь
						   , Знач АдминистраторКластера = ""
						   , Знач ПарольКластера = ""
						   , Знач ИмяВСпискеБаз = ""
						   , Знач ПутьКШаблону = ""
						   , Знач ОшибкаЕслиСуществует = Ложь)

	Если ПустаяСтрока(ИмяБД) Тогда
		ИмяБД = ИмяИБ;
		Лог.Информация("Не указано имя базы на сервере СУБД, будет использовано имя ИБ - """ + ИмяБД + """");
	КонецЕсли;
					
	СтрокаЗапуска = "Srvr=" + СокрЛП(Сервер1С)
				  + ";Ref=" + СокрЛП(ИмяИБ)
				  + ";DBMS=" + СокрЛП(ТипСУБД)
				  + ";DBSrvr=" + СокрЛП(СерверСУБД)
				  + ";DBUID=" + СокрЛП(ПользовательСУБД)
				  + ";DBPwd=" + СокрЛП(ПарольСУБД)
				  + ";DB=" + СокрЛП(ИмяБД)
				  + ";SQLYOffs=" + СокрЛП(СмещениеДат)
				  + ";CrSQLDB=" + ?(СоздаватьБД, "Y", "N")
				  + ";SchJobDn=" + ?(РазрешитьРегЗадания, "N", "Y");
	
	Лог.Отладка("СтрокаЗапуска: " + СтрокаЗапуска);

	Если НЕ ПустаяСтрока(АдминистраторКластера) Тогда
		СтрокаЗапуска = СтрокаЗапуска + ";SUsr=" + СокрЛП(АдминистраторКластера);
	КонецЕсли;
							  
	Если НЕ ПустаяСтрока(ПарольКластера) Тогда
		СтрокаЗапуска = СтрокаЗапуска + ";SPwd=" + СокрЛП(ПарольКластера);
	КонецЕсли;
							  
	ИмяФайлаРезультата = ПолучитьИмяВременногоФайла("out");
	
	ПараметрыЗапуска = Новый Массив();;
	ПараметрыЗапуска.Добавить("CREATEINFOBASE");
	ПараметрыЗапуска.Добавить(СтрокаЗапуска);
	ПараметрыЗапуска.Добавить("/Out " + ИмяФайлаРезультата);
	
	Если НЕ ПустаяСтрока(ИмяВСпискеБаз) Тогда
		ПараметрыЗапуска.Добавить("/AddInList"""+ ИмяВСпискеБаз + """");
	КонецЕсли;
	Если НЕ ПустаяСтрока(ПутьКШаблону) Тогда
		ПараметрыЗапуска.Добавить("/UseTemplate"""+ ПутьКШаблону + """");
	КонецЕсли;

	УправлениеКонфигуратором = Новый УправлениеКонфигуратором();
	УправлениеКонфигуратором.УстановитьКонтекст("/S"+СокрЛП(Сервер1С) + "\" + СокрЛП(ИмяИБ), "", "");
	УправлениеКонфигуратором.ИсключениеПриОшибкеВыполненияКоманды(Ложь);

	Если ЗначениеЗаполнено(ИспользуемаяВерсияПлатформы) Тогда
		УправлениеКонфигуратором.ИспользоватьВерсиюПлатформы(ИспользуемаяВерсияПлатформы);
	КонецЕсли;

	КодВозврата = УправлениеКонфигуратором.ВыполнитьКоманду(ПараметрыЗапуска);
	Если КодВозврата = 0 Тогда
		Лог.Информация("Создана ИБ """ + СокрЛП(Сервер1С) + "\" + СокрЛП(ИмяИБ) + """");
	Иначе
		ВремТекст = Новый ТекстовыйДокумент();
		ВремТекст.Прочитать(ИмяФайлаРезультата);
		ТекстОшибки = СокрЛП(ВремТекст.ПолучитьТекст());
		Если ОшибкаЕслиСуществует
		 ИЛИ СтрНайти(ВРег(ТекстОшибки), ВРег("информационная база уже существует")) = 0 Тогда
			ВызватьИсключение "Ошибка создания ИБ: """ + ТекстОшибки + """";
		КонецЕсли;
		Лог.Информация("Информационная база """ + СокрЛП(Сервер1С) + "\" + СокрЛП(ИмяИБ) + """ уже существует.");
	КонецЕсли;

КонецПроцедуры

Лог = Логирование.ПолучитьЛог("ktb.app.cpdb");