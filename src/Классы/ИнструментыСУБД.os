#Использовать 1commands

Перем Лог;
Перем Сервер Экспорт;
Перем Пользователь Экспорт;
Перем Пароль Экспорт;

////////////////////////////////////////////////////////////////////////////////
// Работа с СУБД

Функция БазаСуществует(База) Экспорт

	ТекстЗапроса = """SET NOCOUNT ON; SELECT COUNT(name) from sysdatabases where name = '" + База + "'; SET NOCOUNT OFF""";
	
	РезультатЗапроса = "";
	КодВозврата = ВыполнитьЗапросСУБД(ТекстЗапроса, РезультатЗапроса);

	Если КодВозврата = 0 Тогда
		РезультатЗапроса = СокрЛП(СтрЗаменить(РезультатЗапроса, "-", ""));
		Возврат РезультатЗапроса = "1";
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции //БазаСуществует()

Функция СоздатьБазу(База, ОписаниеРезультата = "") Экспорт

	Если БазаСуществует(База) Тогда
		ОписаниеРезультата = "База """ + База + """ уже существует!";
		Возврат Ложь;
	КонецЕсли;

	ТекстЗапроса = """USE [master]; CREATE DATABASE " + База + "; ALTER DATABASE " + База + " SET RECOVERY SIMPLE""";
	
	КодВозврата = ВыполнитьЗапросСУБД(ТекстЗапроса, ОписаниеРезультата);
	
	Возврат КодВозврата = 0;
	
КонецФункции //СоздатьБазу()

Функция УстановитьМодельВосстановления(База, МодельВосстановления = "FULL", ОписаниеРезультата = "") Экспорт

	Если ПустаяСтрока(МодельВосстановления) Тогда
		Возврат Истина;
	КонецЕсли;

	Если Найти(ВРег("FULL,SIMPLE,BULK_LOGGED"), ВРег(МодельВосстановления)) = 0 Тогда
		ОписаниеРезультата = "Указана некорректная модель восстановления """ + МодельВосстановления + " (возможные значения: ""FULL"", ""SIMPLE"", ""BULK_LOGGED"")!";
		Возврат Ложь;
	КонецЕсли;

	Если НЕ БазаСуществует(База) Тогда
		ОписаниеРезультата = "База """ + База + """ не существует!";
		Возврат Ложь;
	КонецЕсли;

	ТекстЗапроса = """USE [master]; ALTER DATABASE " + База + " SET RECOVERY " + ВРег(МодельВосстановления) + """";
	
	КодВозврата = ВыполнитьЗапросСУБД(ТекстЗапроса, ОписаниеРезультата);
	
	Возврат КодВозврата = 0;
	
КонецФункции //УстановитьМодельВосстановления()
	
Функция УстановитьВладельцаБазы(База, НовыйВладелец, ОписаниеРезультата = "") Экспорт

	Если НЕ БазаСуществует(База) Тогда
		ОписаниеРезультата = "База """ + База + """ не существует!";
		Возврат Ложь;
	КонецЕсли;

	ТекстЗапроса = """ALTER AUTHORIZATION ON DATABASE::" + База + " TO " + НовыйВладелец + """";
	
	КодВозврата = ВыполнитьЗапросСУБД(ТекстЗапроса, ОписаниеРезультата);
	
	Возврат КодВозврата = 0;
	
КонецФункции //УстановитьВладельцаБазы()

Функция СжатьБазу(База, ОписаниеРезультата = "") Экспорт

	Если НЕ БазаСуществует(База) Тогда
		ОписаниеРезультата = "База """ + База + """ не существует!";
		Возврат Ложь;
	КонецЕсли;

	ТекстЗапроса = """DBCC SHRINKDATABASE(N'" + База + "', 0)""";
	
	КодВозврата = ВыполнитьЗапросСУБД(ТекстЗапроса, ОписаниеРезультата);
	
	Возврат КодВозврата = 0;
	
КонецФункции //СжатьБазу()

Функция ВключитьКомпрессиюСтраниц(База
								, КомпрессияТаблиц = Истина
								, КомпрессияИндексов = Истина
								, ОписаниеРезультата = "") Экспорт

	Если НЕ ДоступностьФункционалаСУБД("Компрессия") Тогда
		ОписаниеВерсии = ПолучитьВерсиюСУБД();
		ОписаниеРезультата = СтрШаблон("Для данной версии СУБД ""MS SQL Server %1 %2"" не доступна функциональность компресии страниц!"
									, ОписаниеВерсии.Версия
									, ОписаниеВерсии.Редакция);
		Возврат Истина;
	КонецЕсли;
							
	Если НЕ (КомпрессияТаблиц ИЛИ КомпрессияИндексов) Тогда
		ОписаниеРезультата = "Не указан флаг включения компрессии страниц для индексов или таблиц!";
		Возврат Истина;
	КонецЕсли;

	Если НЕ БазаСуществует(База) Тогда
		ОписаниеРезультата = "База """ + База + """ не существует!";
		Возврат Ложь;
	КонецЕсли;

	ТекстЗапроса = """USE [" + База + "];";
	Если КомпрессияТаблиц Тогда
		ТекстЗапроса = ТекстЗапроса + Символы.ПС
					 + "EXEC sp_MSforeachtable 'ALTER TABLE ? REBUILD WITH (DATA_COMPRESSION = PAGE)'";
	КонецЕсли;

	Если КомпрессияИндексов Тогда
		ТекстЗапроса = ТекстЗапроса + Символы.ПС
					 + "EXEC sp_MSforeachtable 'ALTER INDEX ALL ON ? REBUILD WITH (DATA_COMPRESSION = PAGE)'";
	КонецЕсли;

	ТекстЗапроса = ТекстЗапроса + """";
	
	КодВозврата = ВыполнитьЗапросСУБД(ТекстЗапроса, ОписаниеРезультата);
	
	Возврат КодВозврата = 0;
	
КонецФункции //ВключитьКомпрессиюСтраниц()

Функция СоздатьРезервнуюКопию(База, ПутьКРезервнойКопии, ОписаниеРезультата = "") Экспорт
	
	Если НЕ БазаСуществует(База) Тогда
		ОписаниеРезультата = "База """ + База + """ не существует!";
		Возврат Ложь;
	КонецЕсли;

	ТекстЗапроса = """BACKUP DATABASE [" + База + "] TO  DISK = N'" + ПутьКРезервнойКопии
				 + "' WITH NOFORMAT, INIT,  NAME = N'" + База
				 + " FULL Backup', SKIP, NOREWIND, NOUNLOAD,COMPRESSION, STATS = 10""";
	
	КодВозврата = ВыполнитьЗапросСУБД(ТекстЗапроса, ОписаниеРезультата);
				 
	Возврат КодВозврата = 0;
	
КонецФункции //СоздатьРезервнуюКопию()

Функция ВосстановитьИзРезервнойКопии(База
								   , СоздаватьБазу = Ложь
								   , ПутьКРезервнойКопии
								   , ПутьКФайлуДанных
								   , ПутьКФайлуЖурнала
								   , ОписаниеРезультата = "") Экспорт
	
	Если НЕ БазаСуществует(База) Тогда
		Если НЕ СоздаватьБазу Тогда
			ОписаниеРезультата = "База """ + База + """ не существует!";
			Возврат Ложь;
		Иначе
			Если НЕ СоздатьБазу(База, ОписаниеРезультата) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	ЛогическоеИмяФайлаДанных = ПолучитьЛогическоеИмяФайлаВРезервнойКопии(ПутьКРезервнойКопии, "D");
	ЛогическоеИмяФайлаЖурнала = ПолучитьЛогическоеИмяФайлаВРезервнойКопии(ПутьКРезервнойКопии, "L");

	ТекстЗапроса = """USE [master]; "
				 + "ALTER DATABASE " + База + " SET SINGLE_USER WITH ROLLBACK IMMEDIATE; "
				 + "RESTORE DATABASE [" + База + "] FROM  DISK = N'" + ПутьКРезервнойКопии + "' WITH  FILE = 1, "
						+ "MOVE N'" + ЛогическоеИмяФайлаДанных + "' TO N'" + ПутьКФайлуДанных + "\" + База + ".mdf', "
						+ "MOVE N'" + ЛогическоеИмяФайлаЖурнала + "' TO N'" + ПутьКФайлуЖурнала + "\" + База + "_log.ldf',"
						+ "NOUNLOAD,  REPLACE,  STATS = 10; "
				 +"ALTER DATABASE " + База + " SET MULTI_USER""";
	
	КодВозврата = ВыполнитьЗапросСУБД(ТекстЗапроса, ОписаниеРезультата);

	Возврат КодВозврата = 0;

КонецФункции //ВосстановитьИзРезервнойКопии()

Функция ПолучитьСписокПолейТаблицыФайловРезервнойКопии()

	ОписаниеПолей = "[LogicalName] nvarchar(128),
					|[PhysicalName] nvarchar(260),
					|[Type] char(1),
					|[FileGroupName] nvarchar(128),
					|[Size] numeric(20,0),
					|[MaxSize] numeric(20,0),
					|[FileID] bigint,
					|[CreateLSN] numeric(25,0),
					|[DropLSN] numeric(25,0) NULL,
					|[UniqueID] uniqueidentifier,
					|[ReadOnlyLSN] numeric(25,0) NULL,
					|[ReadWriteLSN] numeric(25,0) NULL,
					|[BackupSizeInBytes] bigint,
					|[SourceBlockSize] int,
					|[FileGroupID] int,
					|[LogGroupGUID] uniqueidentifier NULL,
					|[DifferentialBaseLSN] numeric(25,0) NULL,
					|[DifferentialBaseGUID] uniqueidentifier,
					|[IsReadOnly] bit,
					|[IsPresent] bit,
					|[TDEThumbprint] varbinary(32)";

	Возврат ОписаниеПолей;

КонецФункции //ПолучитьСписокПолейТаблицыФайловРезервнойКопии()

Функция ПолучитьЛогическоеИмяФайлаВРезервнойКопии(ПутьКРезервнойКопии, Знач ТипФайла = "D") Экспорт
	
	Если ВРег(ТипФайла) = ВРег("ROWS") Тогда
		ТипФайла = "D";
	ИначеЕсли ВРег(ТипФайла) = ВРег("LOG") Тогда
		ТипФайла = "L";
	КонецЕсли;

	Если НЕ (ВРег(ТипФайла) = ВРег("D") ИЛИ ВРег(ТипФайла) = ВРег("L")) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстЗапроса = """SET NOCOUNT ON; "
					+ "DECLARE @T1CTmp TABLE (" + ПолучитьСписокПолейТаблицыФайловРезервнойКопии() + "); "
					+ "INSERT Into @T1CTmp EXECUTE('RESTORE FILELISTONLY FROM DISK = N''" + ПутьКРезервнойКопии + "'''); "
					+ "SELECT [LogicalName] FROM @T1CTmp WHERE [Type] = '" + ВРег(ТипФайла) + "'; "
					+ "SET NOCOUNT OFF;""";
	
	РезультатЗапроса = "";
	КодВозврата = ВыполнитьЗапросСУБД(ТекстЗапроса, РезультатЗапроса);

	Если КодВозврата = 0 Тогда
		Поз = СтрНайти(РезультатЗапроса, "---", НаправлениеПоиска.FromEnd);
		РезультатЗапроса = СокрЛП(Сред(РезультатЗапроса, Поз + 3));
		Возврат РезультатЗапроса;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
		
КонецФункции //ПолучитьЛогическоеИмяФайлаВРезервнойКопии()
	
Функция ПолучитьЛогическоеИмяФайлаВБазе(База, Знач ТипФайла = "ROWS") Экспорт
	
	Если ВРег(ТипФайла) = ВРег("D") Тогда
		ТипФайла = "ROWS";
	ИначеЕсли ВРег(ТипФайла) = ВРег("L") Тогда
		ТипФайла = "LOG";
	КонецЕсли;

	Если НЕ (ВРег(ТипФайла) = ВРег("ROWS") ИЛИ ВРег(ТипФайла) = ВРег("LOG")) Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если НЕ БазаСуществует(База) Тогда
		Возврат Неопределено;
	КонецЕсли;

	ТекстЗапроса = """SET NOCOUNT ON; "
				+ "SELECT [name] FROM sys.master_files WHERE [database_id]=db_id('" + База + "') AND type_desc='" + ТипФайла + "'; "
				+ "SET NOCOUNT OFF;""";
	
	РезультатЗапроса = "";
	КодВозврата = ВыполнитьЗапросСУБД(ТекстЗапроса, РезультатЗапроса);

	Если КодВозврата = 0 Тогда
		Поз = СтрНайти(РезультатЗапроса, "---", НаправлениеПоиска.FromEnd);
		РезультатЗапроса = СокрЛП(Сред(РезультатЗапроса, Поз + 3));
		Возврат РезультатЗапроса;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
		
КонецФункции //ПолучитьЛогическоеИмяФайлаВБазе()

Функция ИзменитьЛогическоеИмяФайлаБазы(База, Имя, НовоеИмя, ОписаниеРезультата = "") Экспорт

	Если НЕ БазаСуществует(База) Тогда
		ОписаниеРезультата = "База """ + База + """ не существует!";
		Возврат Ложь;
	КонецЕсли;

	ТекстЗапроса = """USE [master]; "
				 + "ALTER DATABASE [" + База + "] MODIFY FILE (NAME = N'" + Имя + "', NEWNAME = N'" + НовоеИмя + "');""";
				 
	КодВозврата = ВыполнитьЗапросСУБД(ТекстЗапроса, ОписаниеРезультата);
		
	Возврат КодВозврата = 0;
		
КонецФункции //ИзменитьЛогическоеИмяФайлаБазы()

Функция ПолучитьВерсиюСУБД() Экспорт
	
	ТекстЗапроса = """SET NOCOUNT ON;"
					+ "SELECT"
					+ " SERVERPROPERTY('MachineName') AS ComputerName,"
					+ " SERVERPROPERTY('ServerName') AS InstanceName,"  
					+ " SERVERPROPERTY('Edition') AS Edition,"
					+ " SERVERPROPERTY('ProductVersion') AS ProductVersion,"  
					+ " SERVERPROPERTY('ProductLevel') AS ProductLevel""";
					
	
	ОписаниеРезультата = "";
	КодВозврата = ВыполнитьЗапросСУБД(ТекстЗапроса, ОписаниеРезультата, "|", Истина);
		
	Если КодВозврата = 0 Тогда
		СтруктураРезультата = Новый Соответствие();

		Текст = Новый ТекстовыйДокумент();
		Текст.УстановитьТекст(ОписаниеРезультата);
		
		МассивЗначений = СтрРазделить(Текст.ПолучитьСтроку(3), "|");

		СтруктураРезультата.Вставить("ИмяСервера", МассивЗначений[0]);
		СтруктураРезультата.Вставить("ИмяЭкземпляраСУБД", МассивЗначений[1]);
		СтруктураРезультата.Вставить("Редакция", МассивЗначений[2]);
		СтруктураРезультата.Вставить("Версия", МассивЗначений[3]);
		СтруктураРезультата.Вставить("Уровень", МассивЗначений[4]);
		
		МассивВерсии = СтрРазделить(СтруктураРезультата["Версия"], ".");
		СтруктураРезультата.Вставить("ВерсияМакс", Число(МассивВерсии[0])); // 2000 - 2000 (8)), 2005 - 9, 2008 - 10, 2012 - 11, 2014 - 12, 2016 - 13
		СтруктураРезультата["ВерсияМакс"] = ?(СтруктураРезультата["ВерсияМакс"], 2000, 8);

		СтруктураРезультата.Вставить("Корп", СтрНайти(ВРег(СтруктураРезультата["Редакция"]), ВРег("Enterprise")) > 0);

		Возврат СтруктураРезультата;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции //ПолучитьВерсиюСУБД()

Функция ДоступностьФункционалаСУБД(Знач Функционал) Экспорт

	СтруктураФункционала = Новый Структура("Компрессия, ИзменениеАвторизации", Ложь, Ложь);

	ОписаниеВерсии = ПолучитьВерсиюСУБД();

	Если ОписаниеВерсии = Неопределено Тогда
		Возврат ложь;
	КонецЕсли;

	Если ОписаниеВерсии.ВерсияМакс >= 10 Тогда
		СтруктураФункционала.ИзменениеАвторизации = Истина;
	КонецЕсли;

	Если ОписаниеВерсии.ВерсияМакс >= 13 ИЛИ ОписаниеВерсии.Корп Тогда
		СтруктураФункционала.Компрессия = Истина;
	КонецЕсли;

	Если НЕ СтруктураФункционала.Свойство(Функционал) Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат СтруктураФункционала[Функционал];

КонецФункции //ДоступностьФункционалаСУБД()
	
////////////////////////////////////////////////////////////////////////////////
// Служебные процедуры и функции

Функция ВыполнитьЗапросСУБД(ТекстЗапроса, ОписаниеРезультата = "", Разделитель = "", УбратьПробелы = Ложь) Экспорт

	Лог.Отладка("Текст запроса: %1", ТекстЗапроса);
	
	КомандаРК = Новый Команда;
	
	КомандаРК.УстановитьКоманду("sqlcmd");
	КомандаРК.ДобавитьПараметр("-S " + Сервер);
	КомандаРК.ДобавитьПараметр("-U " + Пользователь);
	КомандаРК.ДобавитьПараметр("-P " + Пароль);
	КомандаРК.ДобавитьПараметр("-Q " + ТекстЗапроса);
	КомандаРК.ДобавитьПараметр("-b");

	Если ЗначениеЗаполнено(Разделитель) Тогда
		КомандаРК.ДобавитьПараметр(СтрШаблон("-s ""%1""", Разделитель));
	КонецЕсли;

	Если УбратьПробелы Тогда
		КомандаРК.ДобавитьПараметр("-W");
	КонецЕсли;

	КомандаРК.УстановитьИсполнениеЧерезКомандыСистемы( Ложь );
	КомандаРК.ПоказыватьВыводНемедленно( Ложь );
	
	КодВозврата = КомандаРК.Исполнить();

	ОписаниеРезультата = КомандаРК.ПолучитьВывод();

	Возврат КодВозврата;

КонецФункции //ВыполнитьЗапросСУБД()
	
Процедура Инициализировать(Знач _Сервер, Знач _Пользователь, Знач _Пароль) Экспорт
	
	Сервер			= _Сервер;
	Пользователь	= _Пользователь;
	Пароль			= _Пароль;
	
КонецПроцедуры //Инициализировать()

	
Лог = Логирование.ПолучитьЛог("ktb.app.cpdb");