#Использовать 1commands

Перем Лог;
Перем Сервер Экспорт; // адрес сервера СУБД
Перем Пользователь Экспорт; // Пользователь сервера СУБД
Перем Пароль Экспорт; // Пароль пользователя сервера СУБД

////////////////////////////////////////////////////////////////////////////////
// Работа с СУБД

// Функция проверяет существование базу на сервере СУБД
//
// Параметры:
//	База			- Строка			- Имя базы данных
//
// Возвращаемое значение:
//	Булево		- Истина - база существует на сервере СУБД
//
Функция БазаСуществует(База) Экспорт

	ТекстЗапроса = """SET NOCOUNT ON; SELECT COUNT(name) from sysdatabases where name = '" + База + "'; SET NOCOUNT OFF""";
	
	РезультатЗапроса = "";
	КодВозврата = ВыполнитьЗапросСУБД(ТекстЗапроса, РезультатЗапроса);

	Если КодВозврата = 0 Тогда
		РезультатЗапроса = СокрЛП(СтрЗаменить(РезультатЗапроса, "-", ""));
		Возврат РезультатЗапроса = "1";
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции // БазаСуществует()

// Функция выполняет команду создания базы на сервере СУБД
//
// Параметры:
//	База					- Строка			- Имя базы данных
//	ОписаниеРезультата		- Строка			- результат выполнения команды
//
// Возвращаемое значение:
//	Булево		- Истина - команда выполнена успешно
//
Функция СоздатьБазу(База, ОписаниеРезультата = "") Экспорт

	Если БазаСуществует(База) Тогда
		ОписаниеРезультата = "База """ + База + """ уже существует!";
		Возврат Ложь;
	КонецЕсли;

	ТекстЗапроса = """USE [master]; CREATE DATABASE " + База + "; ALTER DATABASE " + База + " SET RECOVERY SIMPLE""";
	
	КодВозврата = ВыполнитьЗапросСУБД(ТекстЗапроса, ОписаниеРезультата);
	
	Возврат КодВозврата = 0;
	
КонецФункции // СоздатьБазу()

// Функция устанавливает модель восстановления базы
//
// Параметры:
//	База						- Строка			- Имя базы данных
//	МодельВосстановления		- Строка			- новая модель восстановления (FULL, SIMPLE, BULK_LOGGED)
//	ОписаниеРезультата			- Строка			- результат выполнения команды
//
// Возвращаемое значение:
//	Булево		- Истина - команда выполнена успешно
//
Функция УстановитьМодельВосстановления(База, МодельВосстановления = "FULL", ОписаниеРезультата = "") Экспорт

	Если ПустаяСтрока(МодельВосстановления) Тогда
		Возврат Истина;
	КонецЕсли;

	Если Найти(ВРег("FULL,SIMPLE,BULK_LOGGED"), ВРег(МодельВосстановления)) = 0 Тогда
		ОписаниеРезультата = "Указана некорректная модель восстановления """ + МодельВосстановления + " (возможные значения: ""FULL"", ""SIMPLE"", ""BULK_LOGGED"")!";
		Возврат Ложь;
	КонецЕсли;

	Если НЕ БазаСуществует(База) Тогда
		ОписаниеРезультата = "База """ + База + """ не существует!";
		Возврат Ложь;
	КонецЕсли;

	ТекстЗапроса = """USE [master]; ALTER DATABASE " + База + " SET RECOVERY " + ВРег(МодельВосстановления) + """";
	
	КодВозврата = ВыполнитьЗапросСУБД(ТекстЗапроса, ОписаниеРезультата);
	
	Возврат КодВозврата = 0;
	
КонецФункции // УстановитьМодельВосстановления()
	
// Функция изменяет владельца базы
//
// Параметры:
//	База					- Строка			- Имя базы данных
//	НовыйВладелец			- Строка			- новый владелец базы
//	ОписаниеРезультата		- Строка			- результат выполнения команды
//
// Возвращаемое значение:
//	Булево		- Истина - команда выполнена успешно
//
Функция УстановитьВладельцаБазы(База, НовыйВладелец, ОписаниеРезультата = "") Экспорт

	Если НЕ БазаСуществует(База) Тогда
		ОписаниеРезультата = "База """ + База + """ не существует!";
		Возврат Ложь;
	КонецЕсли;

	ТекстЗапроса = """ALTER AUTHORIZATION ON DATABASE::" + База + " TO " + НовыйВладелец + """";
	
	КодВозврата = ВыполнитьЗапросСУБД(ТекстЗапроса, ОписаниеРезультата);
	
	Возврат КодВозврата = 0;
	
КонецФункции // УстановитьВладельцаБазы()

// Функция выполняет сжатие базы (shrink)
//
// Параметры:
//	База					- Строка			- Имя базы данных
//	ОписаниеРезультата		- Строка			- результат выполнения команды
//
// Возвращаемое значение:
//	Булево		- Истина - команда выполнена успешно
//
Функция СжатьБазу(База, ОписаниеРезультата = "") Экспорт

	Если НЕ БазаСуществует(База) Тогда
		ОписаниеРезультата = "База """ + База + """ не существует!";
		Возврат Ложь;
	КонецЕсли;

	ТекстЗапроса = """DBCC SHRINKDATABASE(N'" + База + "', 0)""";
	
	КодВозврата = ВыполнитьЗапросСУБД(ТекстЗапроса, ОписаниеРезультата);
	
	Возврат КодВозврата = 0;
	
КонецФункции // СжатьБазу()

// Функция выполняет выполняет компрессию базы и индексов на уровне страниц (DATA_COMPRESSION = PAGE)
//
// Параметры:
//	База					- Строка			- Имя базы данных
//	КомпрессияТаблиц		- Булево			- Истина - будет выполнена компрессия таблиц базы
//	КомпрессияИндексов		- Булево			- Истина - будет выполнена компрессия индексов базы
//	ОписаниеРезультата		- Строка			- результат выполнения команду
//
// Возвращаемое значение:
//	Булево		- Истина - команда выполнена успешно
//
Функция ВключитьКомпрессиюСтраниц(База
								, КомпрессияТаблиц = Истина
								, КомпрессияИндексов = Истина
								, ОписаниеРезультата = "") Экспорт

	Если НЕ (КомпрессияТаблиц ИЛИ КомпрессияИндексов) Тогда
		ОписаниеРезультата = "Не указан флаг включения компрессии страниц для индексов или таблиц!";
		Возврат Ложь;
	КонецЕсли;

	Если НЕ БазаСуществует(База) Тогда
		ОписаниеРезультата = "База """ + База + """ не существует!";
		Возврат Ложь;
	КонецЕсли;

	ТекстЗапроса = """USE [" + База + "];";
	Если КомпрессияТаблиц Тогда
		ТекстЗапроса = ТекстЗапроса + Символы.ПС
					 + "EXEC sp_MSforeachtable 'ALTER TABLE ? REBUILD WITH (DATA_COMPRESSION = PAGE)'";
	КонецЕсли;

	Если КомпрессияИндексов Тогда
		ТекстЗапроса = ТекстЗапроса + Символы.ПС
					 + "EXEC sp_MSforeachtable 'ALTER INDEX ALL ON ? REBUILD WITH (DATA_COMPRESSION = PAGE)'";
	КонецЕсли;

	ТекстЗапроса = ТекстЗапроса + """";
	
	КодВозврата = ВыполнитьЗапросСУБД(ТекстЗапроса, ОписаниеРезультата);
	
	Возврат КодВозврата = 0;
	
КонецФункции // ВключитьКомпрессиюСтраниц()

// Функция создает файл резервной копии базы
//
// Параметры:
//	База					- Строка			- Имя базы данных
//	ПутьКРезервнойКопии		- Строка			- путь к файлу резервной копии
//	ОписаниеРезультата		- Строка			- результат выполнения команду
//
// Возвращаемое значение:
//	Булево		- Истина - команда выполнена успешно
//
Функция СоздатьРезервнуюКопию(База, ПутьКРезервнойКопии, ОписаниеРезультата = "") Экспорт
	
	Если НЕ БазаСуществует(База) Тогда
		ОписаниеРезультата = "База """ + База + """ не существует!";
		Возврат Ложь;
	КонецЕсли;

	ТекстЗапроса = """BACKUP DATABASE [" + База + "] TO  DISK = N'" + ПутьКРезервнойКопии
				 + "' WITH NOFORMAT, INIT,  NAME = N'" + База
				 + " FULL Backup', SKIP, NOREWIND, NOUNLOAD,COMPRESSION, STATS = 10""";
	
	КодВозврата = ВыполнитьЗапросСУБД(ТекстЗапроса, ОписаниеРезультата);
				 
	Возврат КодВозврата = 0;
	
КонецФункции // СоздатьРезервнуюКопию()

// Функция выполняет восстановление базы из файла с резервной копией
//
// Параметры:
//	База					- Строка			- Имя базы данных
//	ПутьКРезервнойКопии		- Строка			- путь к файлу резервной копии
//	ПутьКФайлуДанных		- Строка			- путь к файлу базы
//	ПутьКФайлуЖурнала		- Строка			- путь к файлу журнала (transaction log) базы
//	СоздаватьБазу			- Булево			- Истина - будет создана новая база в случае отсутствия
//	ОписаниеРезультата		- Строка			- результат выполнения команду
//
// Возвращаемое значение:
//	Булево		- Истина - команда выполнена успешно
//
Функция ВосстановитьИзРезервнойКопии(База
								   , ПутьКРезервнойКопии
								   , ПутьКФайлуДанных
								   , ПутьКФайлуЖурнала
								   , СоздаватьБазу = Ложь
								   , ОписаниеРезультата = "") Экспорт
	
	Если НЕ БазаСуществует(База) Тогда
		Если НЕ СоздаватьБазу Тогда
			ОписаниеРезультата = "База """ + База + """ не существует!";
			Возврат Ложь;
		Иначе
			Если НЕ СоздатьБазу(База, ОписаниеРезультата) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	ЛогическоеИмяФайлаДанных = ПолучитьЛогическоеИмяФайлаВРезервнойКопии(ПутьКРезервнойКопии, "D");
	ЛогическоеИмяФайлаЖурнала = ПолучитьЛогическоеИмяФайлаВРезервнойКопии(ПутьКРезервнойКопии, "L");

	ТекстЗапроса = """USE [master]; "
				 + "ALTER DATABASE " + База + " SET SINGLE_USER WITH ROLLBACK IMMEDIATE; "
				 + "RESTORE DATABASE [" + База + "] FROM  DISK = N'" + ПутьКРезервнойКопии + "' WITH  FILE = 1, "
						+ "MOVE N'" + ЛогическоеИмяФайлаДанных + "' TO N'" + ПутьКФайлуДанных + "\" + База + ".mdf', "
						+ "MOVE N'" + ЛогическоеИмяФайлаЖурнала + "' TO N'" + ПутьКФайлуЖурнала + "\" + База + "_log.ldf',"
						+ "NOUNLOAD,  REPLACE,  STATS = 10; "
				 +"ALTER DATABASE " + База + " SET MULTI_USER""";
	
	КодВозврата = ВыполнитьЗапросСУБД(ТекстЗапроса, ОписаниеРезультата);

	Возврат КодВозврата = 0;

КонецФункции // ВосстановитьИзРезервнойКопии()

// Функция возвращает список полей таблицы информации о резервной копии
//
// Возвращаемое значение:
//	Строка		- список полей таблицы с информацией о резервной копии (разделенный ",")
//
Функция ПолучитьСписокПолейТаблицыФайловРезервнойКопии()

	ОписаниеПолей = "[LogicalName] nvarchar(128),
					|[PhysicalName] nvarchar(260),
					|[Type] char(1),
					|[FileGroupName] nvarchar(128),
					|[Size] numeric(20,0),
					|[MaxSize] numeric(20,0),
					|[FileID] bigint,
					|[CreateLSN] numeric(25,0),
					|[DropLSN] numeric(25,0) NULL,
					|[UniqueID] uniqueidentifier,
					|[ReadOnlyLSN] numeric(25,0) NULL,
					|[ReadWriteLSN] numeric(25,0) NULL,
					|[BackupSizeInBytes] bigint,
					|[SourceBlockSize] int,
					|[FileGroupID] int,
					|[LogGroupGUID] uniqueidentifier NULL,
					|[DifferentialBaseLSN] numeric(25,0) NULL,
					|[DifferentialBaseGUID] uniqueidentifier,
					|[IsReadOnly] bit,
					|[IsPresent] bit,
					|[TDEThumbprint] varbinary(32)";

	Возврат ОписаниеПолей;

КонецФункции // ПолучитьСписокПолейТаблицыФайловРезервнойКопии()

// Функция возвращает логическое имя файла в резервной копии
//
// Параметры:
//	ПутьКРезервнойКопии			- Строка			- путь к файлу резервной копии
//	ТипФайла					- Строка			- D - файл данных; L - файл журнала транзакций
//
// Возвращаемое значение:
//	Строка		- логическое имя файла базы в файле резервной копии
//
Функция ПолучитьЛогическоеИмяФайлаВРезервнойКопии(ПутьКРезервнойКопии, Знач ТипФайла = "D") Экспорт
	
	Если ВРег(ТипФайла) = ВРег("ROWS") Тогда
		ТипФайла = "D";
	ИначеЕсли ВРег(ТипФайла) = ВРег("LOG") Тогда
		ТипФайла = "L";
	КонецЕсли;

	Если НЕ (ВРег(ТипФайла) = ВРег("D") ИЛИ ВРег(ТипФайла) = ВРег("L")) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстЗапроса = """SET NOCOUNT ON; "
					+ "DECLARE @T1CTmp TABLE (" + ПолучитьСписокПолейТаблицыФайловРезервнойКопии() + "); "
					+ "INSERT Into @T1CTmp EXECUTE('RESTORE FILELISTONLY FROM DISK = N''" + ПутьКРезервнойКопии + "'''); "
					+ "SELECT [LogicalName] FROM @T1CTmp WHERE [Type] = '" + ВРег(ТипФайла) + "'; "
					+ "SET NOCOUNT OFF;""";
	
	РезультатЗапроса = "";
	КодВозврата = ВыполнитьЗапросСУБД(ТекстЗапроса, РезультатЗапроса);

	Если КодВозврата = 0 Тогда
		Поз = СтрНайти(РезультатЗапроса, "---", НаправлениеПоиска.FromEnd);
		РезультатЗапроса = СокрЛП(Сред(РезультатЗапроса, Поз + 3));
		Возврат РезультатЗапроса;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
		
КонецФункции // ПолучитьЛогическоеИмяФайлаВРезервнойКопии()
	
// Функция возвращает логическое имя файла в базе
//
// Параметры:
//	База					- Строка			- Имя базы данных
//	ТипФайла				- Строка			- ROWS - файл базы; LOG - файл журнала транзакций
//
// Возвращаемое значение:
//	Строка		- логическое имя файла базы
//
Функция ПолучитьЛогическоеИмяФайлаВБазе(База, Знач ТипФайла = "ROWS") Экспорт
	
	Если ВРег(ТипФайла) = ВРег("D") Тогда
		ТипФайла = "ROWS";
	ИначеЕсли ВРег(ТипФайла) = ВРег("L") Тогда
		ТипФайла = "LOG";
	КонецЕсли;

	Если НЕ (ВРег(ТипФайла) = ВРег("ROWS") ИЛИ ВРег(ТипФайла) = ВРег("LOG")) Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если НЕ БазаСуществует(База) Тогда
		Возврат Неопределено;
	КонецЕсли;

	ТекстЗапроса = """SET NOCOUNT ON; "
				+ "SELECT [name] FROM sys.master_files WHERE [database_id]=db_id('" + База + "') AND type_desc='" + ТипФайла + "'; "
				+ "SET NOCOUNT OFF;""";
	
	РезультатЗапроса = "";
	КодВозврата = ВыполнитьЗапросСУБД(ТекстЗапроса, РезультатЗапроса);

	Если КодВозврата = 0 Тогда
		Поз = СтрНайти(РезультатЗапроса, "---", НаправлениеПоиска.FromEnd);
		РезультатЗапроса = СокрЛП(Сред(РезультатЗапроса, Поз + 3));
		Возврат РезультатЗапроса;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
		
КонецФункции // ПолучитьЛогическоеИмяФайлаВБазе()

// Функция изменяет логическое имя файла базы
//
// Параметры:
//	База					- Строка			- Имя базы данных
//	Имя						- Строка			- логическое имя изменяемого файла
//	НовоеИмя				- Строка			- новое логическое имя
//	ОписаниеРезультата		- Строка			- результат выполнения команду
//
// Возвращаемое значение:
//	Булево		- Истина - команда выполнена успешно
//
Функция ИзменитьЛогическоеИмяФайлаБазы(База, Имя, НовоеИмя, ОписаниеРезультата = "") Экспорт

	Если НЕ БазаСуществует(База) Тогда
		ОписаниеРезультата = "База """ + База + """ не существует!";
		Возврат Ложь;
	КонецЕсли;

	ТекстЗапроса = """USE [master]; "
				 + "ALTER DATABASE [" + База + "] MODIFY FILE (NAME = N'" + Имя + "', NEWNAME = N'" + НовоеИмя + "');""";
				 
	КодВозврата = ВыполнитьЗапросСУБД(ТекстЗапроса, ОписаниеРезультата);
		
	Возврат КодВозврата = 0;
		
КонецФункции // ИзменитьЛогическоеИмяФайлаБазы()

////////////////////////////////////////////////////////////////////////////////
// Служебные процедуры и функции

// Функция выполняет запрос к СУБД (используется консольная утилита sqlcmd)
//
// Параметры:
//	ТекстЗапроса			- Строка			- текст исполняемого запроса
//	ОписаниеРезультата		- Строка			- результат выполнения команду
//
// Возвращаемое значение:
//	Булево		- Истина - команда выполнена успешно
//
Функция ВыполнитьЗапросСУБД(ТекстЗапроса, ОписаниеРезультата = "") Экспорт

	Лог.Отладка("Текст запроса: %1", ТекстЗапроса);
	
	КомандаРК = Новый Команда;
	
	КомандаРК.УстановитьКоманду("sqlcmd");
	КомандаРК.ДобавитьПараметр("-S " + Сервер);
	КомандаРК.ДобавитьПараметр("-U " + Пользователь);
	КомандаРК.ДобавитьПараметр("-P " + Пароль);
	КомандаРК.ДобавитьПараметр("-Q " + ТекстЗапроса);
	КомандаРК.ДобавитьПараметр("-b");

	КомандаРК.УстановитьИсполнениеЧерезКомандыСистемы( Ложь );
	КомандаРК.ПоказыватьВыводНемедленно( Ложь );
	
	КодВозврата = КомандаРК.Исполнить();

	ОписаниеРезультата = КомандаРК.ПолучитьВывод();

	Возврат КодВозврата;

КонецФункции // ВыполнитьЗапросСУБД()
	
// Процедура инициализации объекта доступа к СУБД
//
// Параметры:
//	_Сервер				- Строка			- адрес сервера СУБД
//	_Пользователь		- Строка			- пользователь сервера СУБД
//	_Пароль				- Строка			- пароль пользователя сервера СУБД
//
// Возвращаемое значение:
//	Булево		- Истина - команда выполнена успешно
//
Процедура Инициализировать(Знач _Сервер, Знач _Пользователь, Знач _Пароль) Экспорт
	
	Сервер			= _Сервер;
	Пользователь	= _Пользователь;
	Пароль			= _Пароль;
	
КонецПроцедуры // Инициализировать()

	
Лог = Логирование.ПолучитьЛог("ktb.app.cpdb");