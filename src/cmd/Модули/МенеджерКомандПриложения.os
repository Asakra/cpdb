
Перем ГлобальныйИсполнителиКоманд;

// Процедура регистрирует доступные команды приложения
//
// Параметры:
//	Парсер	- ПарсерАргументовКоманднойСтроки(cmdline)	- Парсер команд приложения, к которому добавляются команды
//
Процедура ЗарегистрироватьКоманды(Знач Парсер) Экспорт
	
	ГлобальныйИсполнителиКоманд = Новый Соответствие;
	
	ДобавитьКоманду("help"			, "КомандаСправкаПоПараметрам"			, Парсер);
	ДобавитьКоманду("batch"			, "КомандаВыполнитьПакет"				, Парсер);
	ДобавитьКоманду("scripts"		, "КомандаВыполнитьСкрипты"				, Парсер);
	ДобавитьКоманду("backup"		, "КомандаСоздатьРезервнуюКопию"		, Парсер);
	ДобавитьКоманду("restore"		, "КомандаВосстановитьИзРезервнойКопии"	, Парсер);
	ДобавитьКоманду("compress"		, "КомандаВыполнитьКомпрессиюСтраниц"	, Парсер);
	ДобавитьКоманду("createib"		, "КомандаСоздатьСервернуюИБ"			, Парсер);
	ДобавитьКоманду("dumpib"		, "КомандаВыгрузитьИБВФайл"				, Парсер);
	ДобавитьКоманду("restoreib"		, "КомандаЗагрузитьИБИзФайла"			, Парсер);
	ДобавитьКоманду("putyadisk"		, "КомандаПоместитьФайлВЯДиск"			, Парсер);
	ДобавитьКоманду("getyadisk"		, "КомандаПолучитьФайлИзЯДиска"			, Парсер);
	ДобавитьКоманду("mapdrive"		, "КомандаПодключитьСетевойДиск"		, Парсер);
	ДобавитьКоманду("umapdrive"		, "КомандаОтключитьСетевойДиск"			, Парсер);
	ДобавитьКоманду("copy"			, "КомандаКопироватьФайл"				, Парсер);
	ДобавитьКоманду("uconstorage"	, "КомандаОтключитьОтХранилища"			, Парсер);
	ДобавитьКоманду("constorage"	, "КомандаПодключитьКХранилищу"			, Парсер);
	ДобавитьКоманду("split"			, "КомандаРазбитьФайлНаЧасти"			, Парсер);
	ДобавитьКоманду("merge"			, "КомандаСоединитьЧастиВФайл"			, Парсер);
	
КонецПроцедуры // ЗарегистрироватьКоманды()

// Функция возвращает класс реализации команды по ее имени
//
// Параметры:
//	ИмяКоманды			- Строка			- имя команды
//
// Возвращаемое значение:
//	Класс		- класс, содержащий реализацию команды
//
Функция ПолучитьКоманду(Знач ИмяКоманды) Экспорт
	
	КлассРеализации = ГлобальныйИсполнителиКоманд[ИмяКоманды];
	Если КлассРеализации = Неопределено Тогда
		ВызватьИсключение СтрШаблон("Неверная операция. Команда ""%1"" не предусмотрена", ИмяКоманды);
	КонецЕсли;
	
	Возврат КлассРеализации;
	
КонецФункции // ПолучитьКоманду()

// Функция выполняет команду
//
// Параметры:
//	ИмяКоманды				- Строка			- имя команды
//	ПараметрыКоманды		- Массив			- массив параметров команды
//
// Возвращаемое значение:
//	Число		- код возврата выполнения команды
//
Функция ВыполнитьКоманду(Знач ИмяКоманды, Знач ПараметрыКоманды) Экспорт
	
	Команда = ПолучитьКоманду(ИмяКоманды);

	Возврат Команда.ВыполнитьКоманду(ПараметрыКоманды);

КонецФункции // ВыполнитьКоманду()

// Функция возвращает структуру возможных результатов выполнеия команд
//
// Возвращаемое значение:
//	Структура		- возможные результаты выполнения команды
//
Функция РезультатыКоманд() Экспорт

	РезультатыКоманд = Новый Структура;
	РезультатыКоманд.Вставить("НеРеализовано", 255);
	РезультатыКоманд.Вставить("Успех", 0);
	РезультатыКоманд.Вставить("НеверныеПараметры", 5);
	РезультатыКоманд.Вставить("ОшибкаВремениВыполнения", 1);
	
	Возврат РезультатыКоманд;

КонецФункции // РезультатыКоманд()

// Процедура добавляет команду в парсер аргументов командной строки
//
// Параметры:
//	ИмяКоманды		- Строка									- имя команды
//	КлассРеализации	- Строка									- класс, содержащий реализацию команды
//	Парсер			- ПарсерАргументовКоманднойСтроки(cmdline)	- Парсер команд приложения,
//																к которому добавляются команды
//
Процедура ДобавитьКоманду(Знач ИмяКоманды, Знач КлассРеализации, Знач Парсер)
	
	РеализацияКоманды = Новый(КлассРеализации);
	РеализацияКоманды.ЗарегистрироватьКоманду(ИмяКоманды, Парсер);
	ГлобальныйИсполнителиКоманд.Вставить(ИмяКоманды, РеализацияКоманды);

КонецПроцедуры // ДобавитьКоманду()

// Процедура выводит общую справку по командам 
//
Процедура ПоказатьСправкуПоКомандам() Экспорт

	ВыполнитьКоманду("help", Новый Соответствие);

КонецПроцедуры // ПоказатьСправкуПоКомандам()

