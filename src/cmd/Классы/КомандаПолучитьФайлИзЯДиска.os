// ----------------------------------------------------------
// This Source Code Form is subject to the terms of the
// Mozilla Public License, v.2.0. If a copy of the MPL
// was not distributed with this file, You can obtain one
// at http://mozilla.org/MPL/2.0/.
// ----------------------------------------------------------
// Codebase: https://github.com/ArKuznetsov/cpdb/
// ----------------------------------------------------------

Перем Лог;       // - Объект      - объект записи лога приложения

#Область СлужебныйПрограммныйИнтерфейс

// Процедура - устанавливает описание команды
//
// Параметры:
//  Команда    - КомандаПриложения     - объект описание команды
//
Процедура ОписаниеКоманды(Команда) Экспорт
	
	Команда.Опция("p path", "", "Путь к локальному каталогу для сохранения загруженных файлов")
	       .ТСтрока()
	       .Обязательный()
	       .ВОкружении("CPDB_YD_GET_PATH");
	
	Команда.Опция("f yf file ya-file", "", "путь к файлу на Yandex-Диск для загрузки")
	       .ТСтрока()
	       .ВОкружении("CPDB_YD_GET_FILE");
	
	Команда.Опция("l yl list ya-list", "", "путь к файлу на Yandex-Диск со списком файлов,
	                                       |которые будут загружены (параметр -file игнорируется)")
	       .ТСтрока()
	       .ВОкружении("CPDB_YD_GET_LIST");
	
	Команда.Опция("t yt token ya-token", "", "Token авторизации")
	       .ТСтрока()
	       .Обязательный()
	       .ВОкружении("CPDB_YD_TOKEN");
	
	Команда.Опция("ds delsrc", "", "удалить исходные файлы после получения")
	       .Флаговый()
	       .ВОкружении("CPDB_YD_GET_DEL_SRC");
	
   КонецПроцедуры // ОписаниеКоманды()

// Процедура - запускает выполнение команды устанавливает описание команды
//
// Параметры:
//  Команда    - КомандаПриложения     - объект  описание команды
//
Процедура ВыполнитьКоманду(Знач Команда) Экспорт

	ВыводОтладочнойИнформации = Команда.ЗначениеОпции("verbose");

	ПараметрыПриложения.УстановитьРежимОтладки(ВыводОтладочнойИнформации);

	ЭтоСписокФайлов = Истина;
	
	ЦелевойПуть      = Команда.ЗначениеОпции("path");
	OAuth_Токен      = Команда.ЗначениеОпции("token");

	ПутьНаДиске      = Команда.ЗначениеОпции("list");
	Если НЕ ЗначениеЗаполнено(ПутьНаДиске) Тогда
		ПутьНаДиске  = Команда.ЗначениеОпции("file");
		ЭтоСписокФайлов	= Ложь;
	КонецЕсли;

	УдалитьИсточник  = Команда.ЗначениеОпции("delsrc");

	Если ПустаяСтрока(ПутьНаДиске) Тогда
		ВызватьИсключение  "Не задан путь к файлу для получения из Yandex-Диск";
	КонецЕсли;

	ЯндексДиск = Новый ЯндексДиск;
	ЯндексДиск.УстановитьТокенАвторизации(OAuth_Токен);

	ПутьКСкачанномуФайлу = ПолучитьФайлИзЯДиска(ЯндексДиск, ПутьНаДиске, ЦелевойПуть, УдалитьИсточник);

	ФайлИнфо = Новый Файл(ПутьКСкачанномуФайлу);

	КаталогНаДиске = СтрЗаменить(ПутьНаДиске, ФайлИнфо.Имя, "");

	Если ЭтоСписокФайлов Тогда
		МассивПолучаемыхФайлов = ПрочитатьСписокФайлов(ПутьКСкачанномуФайлу);
		Для Каждого ПолучаемыйФайл Из МассивПолучаемыхФайлов Цикл
			ПолучитьФайлИзЯДиска(ЯндексДиск,
			                     ОбъединитьПути(КаталогНаДиске, ПолучаемыйФайл),
			                     ЦелевойПуть,
			                     УдалитьИсточник);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // ВыполнитьКоманду()

#КонецОбласти // СлужебныйПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

// Функция возвращает массив имен файлов архива
//   
// Параметры:
//   ПутьКСписку    - Строка    - путь к файлу со списком файлов архива
//
// Возвращаемое значение:
//   Массив(Строка)    - список файлов архива
//
Функция ПрочитатьСписокФайлов(ПутьКСписку)

	МассивФайловЧастей = Новый Массив();

	ЧтениеСписка = Новый ЧтениеТекста(ПутьКСписку, КодировкаТекста.UTF8);
	СтрокаСписка = ЧтениеСписка.ПрочитатьСтроку();
	Пока СтрокаСписка <> Неопределено Цикл
		Если ЗначениеЗаполнено(СокрЛП(СтрокаСписка)) Тогда
			МассивФайловЧастей.Добавить(СтрокаСписка);
		КонецЕсли;
		
		СтрокаСписка = ЧтениеСписка.ПрочитатьСтроку();
	КонецЦикла;
	
	ЧтениеСписка.Закрыть();

	Возврат МассивФайловЧастей;

КонецФункции // ПрочитатьСписокФайлов()

// Функция получения файла из Yandex-Диска
//
// Параметры:
//   ЯДиск              - ЯндексДиск    - объект для работы с yandex-диском
//   ПутьНаДиске        - Строка        - расположение файла на yandex-диске
//   ЦелевойПуть        - Строка        - путь, куда будет загружен файл
//   УдалитьИсточник    - Булево        - Истина - удалить файл после загрузки
//
// Возвращаемое значение:
//   Число - код возврата команды
//
Функция ПолучитьФайлИзЯДиска(ЯДиск, Знач ПутьНаДиске, Знач ЦелевойПуть, УдалитьИсточник = Ложь)
	
	ПутьКСкачанномуФайлу = "";
	
	Попытка
		ПутьКСкачанномуФайлу = ЯДиск.СкачатьФайлСДиска(ЦелевойПуть, ПутьНаДиске, Истина);

		Лог.Информация("Файл получен %1", ПутьКСкачанномуФайлу);
	Исключение
		ТекстОшибки = СтрШаблон("Ошибка получения файла %1: %2",
		                        ПутьНаДиске,
		                        ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;

	Если УдалитьИсточник Тогда
		ЯДиск.Удалить(ПутьНаДиске, Истина);
		СвойстваДиска = ЯДиск.ПолучитьСвойстваДиска();
		Лог.Информация(СтрШаблон("Удален файл на Yandex-Диск %1", ПутьНаДиске));
		Лог.Отладка(СтрШаблон("Всего доступно %1 байт", СвойстваДиска.total_space));
		Лог.Отладка(СтрШаблон("Из них занято %1 байт", СвойстваДиска.used_space));
	КонецЕсли;
	
	Возврат ПутьКСкачанномуФайлу;

КонецФункции // ПолучитьФайлИзЯДиска()

#КонецОбласти // СлужебныеПроцедурыИФункции

#Область ОбработчикиСобытий

// Процедура - обработчик события "ПриСозданииОбъекта"
//
// BSLLS:UnusedLocalMethod-off
Процедура ПриСозданииОбъекта()

	Лог = ПараметрыПриложения.Лог();

КонецПроцедуры // ПриСозданииОбъекта()
// BSLLS:UnusedLocalMethod-on

#КонецОбласти // ОбработчикиСобытий
