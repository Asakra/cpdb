// ----------------------------------------------------------
// This Source Code Form is subject to the terms of the
// Mozilla Public License, v.2.0. If a copy of the MPL
// was not distributed with this file, You can obtain one
// at http://mozilla.org/MPL/2.0/.
// ----------------------------------------------------------
// Codebase: https://github.com/ArKuznetsov/cpdb/
// ----------------------------------------------------------

Перем Лог;       // - Объект      - объект записи лога приложения

#Область СлужебныйПрограммныйИнтерфейс

// Процедура - устанавливает описание команды
//
// Параметры:
//  Команда    - КомандаПриложения     - объект описание команды
//
Процедура ОписаниеКоманды(Команда) Экспорт
	
	Команда.Опция("a arc", "", "имя первого файла архива")
	       .ТСтрока()
	       .ВОкружении("CPDB_FILE_MERGE_ARCH");
	
	Команда.Опция("l list", "", "имя файла, списка томов архива")
	       .ТСтрока()
	       .ВОкружении("CPDB_FILE_MERGE_LIST");
	
	Команда.Опция("ds delsrc", Ложь, "удалить исходные файлы после выполнения операции")
	       .Флаговый()
	       .ВОкружении("CPDB_FILE_MERGE_DEL_SRC");
	
КонецПроцедуры // ОписаниеКоманды()

// Процедура - запускает выполнение команды устанавливает описание команды
//
// Параметры:
//  Команда    - КомандаПриложения     - объект  описание команды
//
Процедура ВыполнитьКоманду(Знач Команда) Экспорт

	ВыводОтладочнойИнформации = Команда.ЗначениеОпции("verbose");

	ПараметрыПриложения.УстановитьРежимОтладки(ВыводОтладочнойИнформации);

	ЭтоСписокФайлов = Истина;

	ПутьКАрхиву = Команда.ЗначениеОпции("list");
	Если НЕ ЗначениеЗаполнено(ПутьКАрхиву) Тогда
		ПутьКАрхиву = Команда.ЗначениеОпции("arch");
		ЭтоСписокФайлов = Ложь;
	КонецЕсли;
	УдалитьИсточник = Команда.ЗначениеОпции("delsrc");
	
	Если ПустаяСтрока(ПутьКАрхиву) Тогда
		ВызватьИсключение "Не указан путь к первому файлу архива или списку файлов";
	КонецЕсли;
	
	Попытка
		РаспаковатьАрхив(ПутьКАрхиву, ЭтоСписокФайлов, УдалитьИсточник);
	Исключение
		ТекстОшибки = СтрШаблон("Ошибка восстановления файла из частей ""%1"": %2%3",
		                        ПутьКАрхиву,
		                        Символы.ПС,
		                        ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;

КонецПроцедуры // ВыполнитьКоманду()

#КонецОбласти // СлужебныйПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

// Процедура, выполняет распаковку архива
//
Процедура РаспаковатьАрхив(Знач ПутьКАрхиву, Знач ЭтоСписокФайлов = Ложь, Знач УдалитьИсточник = Ложь)

	ПутьК7ЗИП = ЗапускПриложений.Найти7Zip();

	Если НЕ ЗначениеЗаполнено(ПутьК7ЗИП) Тогда
		ВызватьИсключение "7-Zip не найден";
	КонецЕсли;

	ДанныеИсхФайла = Новый Файл(ПутьКАрхиву);

	ИмяФайлаОшибокАрхивации = ДанныеИсхФайла.Путь + "7z_error_messages.txt";

	МассивФайловЧастей = Новый Массив();

	Если ЭтоСписокФайлов Тогда
		МассивФайловЧастей = ПрочитатьСписокФайлов(ПутьКАрхиву);
		ПерваяЧастьАрхива = МассивФайловЧастей[0];
	Иначе
		ПерваяЧастьАрхива = ПутьКАрхиву;
		МассивФайловЧастей = НайтиФайлы(ДанныеИсхФайла.Путь, ДанныеИсхФайла.ИмяБезРасширения + ".???", Ложь);
	КонецЕсли;

	КомандаАрхиватора = СтрШаблон("""%1"" x -aoa -y  ""%2""", ПутьК7ЗИП, ПерваяЧастьАрхива);
	
	Лог.Отладка("команда архиватора: " + КомандаАрхиватора);
	КодВозврата = 0;
	ЗапуститьПриложение(КомандаАрхиватора, ДанныеИсхФайла.Путь, Истина, КодВозврата);

	Если КодВозврата = 0 Тогда
		Лог.Отладка("Всего частей: " + МассивФайловЧастей.Количество());

		Если УдалитьИсточник Тогда
			Для Каждого ФайлЧасти Из МассивФайловЧастей Цикл
				Если ТипЗнч(ФайлЧасти) = Тип("Файл") Тогда
					УдалитьФайлы(ФайлЧасти.ПолноеИмя);
				Иначе
					УдалитьФайлы(ФайлЧасти);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

	Иначе

		Лог.Ошибка("Распаковка завершилось с ошибкой. Код возврата " + КодВозврата);
		ФайлОшибокАрх = Новый Файл(ИмяФайлаОшибокАрхивации);
		Если ФайлОшибокАрх.Существует() Тогда
			ЧтениеФайла = Новый ЧтениеТекста(ИмяФайлаОшибокАрхивации);
			СтрокаФайлаОшибок = ЧтениеФайла.ПрочитатьСтроку();
			Пока СтрокаФайлаОшибок <> Неопределено Цикл
				Лог.Ошибка(СтрокаФайлаОшибок);
				СтрокаФайлаОшибок = ЧтениеФайла.ПрочитатьСтроку();
			КонецЦикла;
			ЧтениеФайла.Закрыть();
			УдалитьФайлы(ИмяФайлаОшибокАрхивации);
		КонецЕсли;

		Возврат;
	КонецЕсли;

КонецПроцедуры // РаспаковатьАрхив()

// Функция возвращает массив имен файлов архива
//   
// Параметры:
//   ПутьКСписку    - Строка    - путь к файлу со списком файлов архива
//
// Возвращаемое значение:
//   Массив из Строка    - список файлов архива
//
Функция ПрочитатьСписокФайлов(ПутьКСписку)

	ДанныеИсхФайла = Новый Файл(ПутьКСписку);

	МассивФайловЧастей = Новый Массив();
	
	ЧтениеСписка = Новый ЧтениеТекста(ПутьКСписку, КодировкаТекста.UTF8);
	СтрокаСписка = ЧтениеСписка.ПрочитатьСтроку();
	Пока СтрокаСписка <> Неопределено Цикл
		Если ЗначениеЗаполнено(СокрЛП(СтрокаСписка)) Тогда
			МассивФайловЧастей.Добавить(ДанныеИсхФайла.Путь + СтрокаСписка);
		КонецЕсли;
			
		СтрокаСписка = ЧтениеСписка.ПрочитатьСтроку();
	КонецЦикла;
		
	ЧтениеСписка.Закрыть();

	МассивФайловЧастей.Добавить(ДанныеИсхФайла.ПолноеИмя);

	Возврат МассивФайловЧастей;

КонецФункции // ПрочитатьСписокФайлов()

#КонецОбласти // СлужебныеПроцедурыИФункции

#Область ОбработчикиСобытий

// Процедура - обработчик события "ПриСозданииОбъекта"
//
// BSLLS:UnusedLocalMethod-off
Процедура ПриСозданииОбъекта()

	Лог = ПараметрыПриложения.Лог();

КонецПроцедуры // ПриСозданииОбъекта()
// BSLLS:UnusedLocalMethod-on

#КонецОбласти // ОбработчикиСобытий
