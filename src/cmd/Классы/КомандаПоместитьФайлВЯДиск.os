// ----------------------------------------------------------
// This Source Code Form is subject to the terms of the
// Mozilla Public License, v.2.0. If a copy of the MPL
// was not distributed with this file, You can obtain one
// at http://mozilla.org/MPL/2.0/.
// ----------------------------------------------------------
// Codebase: https://github.com/ArKuznetsov/cpdb/
// ----------------------------------------------------------

Перем Лог;       // - Объект      - объект записи лога приложения

#Область СлужебныйПрограммныйИнтерфейс

// Процедура - устанавливает описание команды
//
// Параметры:
//  Команда    - КомандаПриложения     - объект описание команды
//
Процедура ОписаниеКоманды(Команда) Экспорт
	
	Команда.Опция("f file", "", "путь к локальному файлу для помещения на Yandex-Диск")
	       .ТСтрока()
	       .ВОкружении("CPDB_YD_PUT_FILE");
	
	Команда.Опция("l list", "", "путь к локальному файлу со списком файлов,
	                            |которые будут помещены на Yandex-Диск
	                            |(параметр -file игнорируется)")
	       .ТСтрока()
	       .ВОкружении("CPDB_YD_PUT_LIST");
	
	Команда.Опция("yt ya-token", "", "Token авторизации")
	       .ТСтрока()
	       .Обязательный()
	       .ВОкружении("CPDB_YD_TOKEN");
	
	Команда.Опция("yp ya-path", "", "путь к файлу на Yandex-Диск")
	       .ТСтрока()
	       .Обязательный()
	       .ВОкружении("CPDB_YD_PUT_PATH");
	
	Команда.Опция("ch check-hash", "", "(TBE) Проверять совпадение хешей скопированных файлов")
	       .Флаговый()
	       .ВОкружении("CPDB_YD_PUT_CHECK_HASH");
	
	Команда.Опция("ds delsrc", "", "удалить исходные файлы после отправки")
	       .Флаговый()
	       .ВОкружении("CPDB_YD_PUT_DEL_SRC");
	
	Команда.Опция("r replace", "", "перезаписать файл на Яндекс-диске при загрузке")
	       .Флаговый()
	       .ВОкружении("CPDB_YD_PUT_REPLACE");
	
КонецПроцедуры // ОписаниеКоманды()

// Процедура - запускает выполнение команды устанавливает описание команды
//
// Параметры:
//  Команда    - КомандаПриложения     - объект  описание команды
//
Процедура ВыполнитьКоманду(Знач Команда) Экспорт

	ВыводОтладочнойИнформации = Команда.ЗначениеОпции("verbose");

	ПараметрыПриложения.УстановитьРежимОтладки(ВыводОтладочнойИнформации);

	Сервер             = Команда.ЗначениеОпции("sql-srvr");
	Пользователь       = Команда.ЗначениеОпции("sql-user");
	ПарольПользователя = Команда.ЗначениеОпции("sql-pwd");
	СкриптыВыполнения  = Команда.ЗначениеОпции("sql-files");
	СтрокаПеременных   = Команда.ЗначениеОпции("sql-vars");

	ЭтоСписокФайлов = Истина;

	ПутьКФайлу              = Команда.ЗначениеОпции("list");
	Если НЕ ЗначениеЗаполнено(ПутьКФайлу) Тогда
		ПутьКФайлу          = Команда.ЗначениеОпции("file");
		ЭтоСписокФайлов	= Ложь;
	КонецЕсли;
	OAuth_Токен             = Команда.ЗначениеОпции("ya-token");
	ЦелевойПуть             = Команда.ЗначениеОпции("ya-path");
	УдалитьИсточник         = Команда.ЗначениеОпции("delsrc");
	Перезаписывать          = Команда.ЗначениеОпции("replace");
		
	Если ПустаяСтрока(ПутьКФайлу) Тогда
		ВызватьИсключение "Не указан путь к файлу для помещения на Yandex-Диск";
	КонецЕсли;
	
	МассивОтправляемыхФайлов = Новый Массив;
	ФайлИнфо = Новый Файл(ПутьКФайлу);

	ЯндексДиск = Новый ЯндексДиск();
	ЯндексДиск.УстановитьТокенАвторизации(OAuth_Токен);

	// Если целевой путь не указан - тогда используется корень Яндекс-диска
	Если ЗначениеЗаполнено(ЦелевойПуть) Тогда
		// Определяем наличие каталога
		СоздатьПапкуНаЯДиске(ЯндексДиск, ЦелевойПуть);
	Иначе
		ЦелевойПуть = "";
	КонецЕсли;
	
	Если ЭтоСписокФайлов Тогда
		МассивОтправляемыхФайлов = ПрочитатьСписокФайлов(ПутьКФайлу);
	КонецЕсли;
	
	// Добавляем файл (или файл-список файлов) списка для закачки на Я-Диск
	МассивОтправляемыхФайлов.Добавить(ФайлИнфо.Имя);

	Для Каждого ОтправляемыйФайл Из МассивОтправляемыхФайлов Цикл
		ОтправитьФайлНаЯДиск(ЯндексДиск, ФайлИнфо.Путь, ОтправляемыйФайл, ЦелевойПуть, Перезаписывать);

		Если УдалитьИсточник Тогда
			УдалитьФайлы(ОтправляемыйФайл);
			Лог.Информация("Исходный файл %1 удален", ОтправляемыйФайл);
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры // ВыполнитьКоманду()

#КонецОбласти // СлужебныйПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

// Функция возвращает массив имен файлов из текстового файла
//   
// Параметры:
//   ПутьКСписку    - Строка    - путь к файлу со списком файлов архива
//
// Возвращаемое значение:
//   Массив(Строка)    - список файлов архива
//
Функция ПрочитатьСписокФайлов(ПутьКСписку)

	МассивФайловЧастей = Новый Массив();

	ЧтениеСписка = Новый ЧтениеТекста(ПутьКСписку, КодировкаТекста.UTF8);
	СтрокаСписка = ЧтениеСписка.ПрочитатьСтроку();
	Пока СтрокаСписка <> Неопределено Цикл
		Если ЗначениеЗаполнено(СокрЛП(СтрокаСписка)) Тогда
			МассивФайловЧастей.Добавить(СтрокаСписка);
		КонецЕсли;
		
		СтрокаСписка = ЧтениеСписка.ПрочитатьСтроку();
	КонецЦикла;
	
	ЧтениеСписка.Закрыть();

	Возврат МассивФайловЧастей;

КонецФункции // ПрочитатьСписокФайлов()

// Функция отправки файла на Yandex-Диск
//
// Параметры:
//   ЯДиск          - ЯндексДиск    - объект ЯндексДиск для работы с yandex-диском
//   Каталог        - Строка        - расположение загружаемого файла
//   ИмяФайла       - Булево        - имя загружаемого файла
//   ЦелевойПуть    - ЯндексДиск    - путь на yandex-диске, куда будет загружен файл
//   Перезаписывать - Булево        - перезаписать файл на Яндекс-диске при загрузке
//
Процедура ОтправитьФайлНаЯДиск(ЯДиск, Знач Каталог, Знач ИмяФайла, Знач ЦелевойПуть, Перезаписывать = Ложь)
	
	СвойстваДиска = ЯДиск.ПолучитьСвойстваДиска();
	Лог.Отладка("Всего доступно %1 байт", СвойстваДиска.total_space);
	Лог.Отладка("Из них занято %1 байт", СвойстваДиска.used_space);
	
	СвободноМеста = СвойстваДиска.total_space - СвойстваДиска.used_space;
	Лог.Отладка("Копируемый файл: каталог %1, имя файла %2", Каталог, ИмяФайла);
	ИсходныйФайл = Новый Файл(Каталог + "\" + ИмяФайла);
	ИмяЗагружаемогоФайла = ЦелевойПуть + "/" + ИсходныйФайл.Имя;
	
	Если СвободноМеста < ИсходныйФайл.Размер() Тогда
		ТекстОшибки = СтрШаблон("Недостаточно места на ЯДиске для копирования файла %1: есть %2, надо %3",
		                        ИсходныйФайл.Имя,
		                        СвободноМеста,
		                        ИсходныйФайл.Размер());
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Попытка
		ЯДиск.ЗагрузитьНаДиск(ИсходныйФайл.ПолноеИмя, ИмяЗагружаемогоФайла, Перезаписывать);
		Лог.Информация("Файл загружен %1", ИсходныйФайл.Имя);
	Исключение
		ТекстОшибки = СтрШаблон("Ошибка загрузки файла %1 в %2:%3%4",
		                        ИсходныйФайл.Имя,
		                        ИмяЗагружаемогоФайла,
		                        Символы.ПС,
		                        ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;

	Попытка
		ЯДиск.ПолучитьСвойстваРесурса(ИмяЗагружаемогоФайла);
	Исключение
		ТекстОшибки = СтрШаблон("Ошибка при получении свойств файла %1:%2%3",
		                        ИмяЗагружаемогоФайла,
		                        Символы.ПС,
		                        ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
КонецПроцедуры // ОтправитьФайлНаЯДиск()

// Создает папку на Я-Диске
//
// Параметры:
//   ЯДиск          - ЯндексДиск    - объект ЯндексДиск для работы с yandex-диском
//   ЦелевойПуть    - ЯндексДиск    - путь на yandex-диске к создаваемому каталогу
//
// Возвращаемое значение:
//   Строка    - Созданный путь
//
Функция СоздатьПапкуНаЯДиске(ЯДиск, Знач ЦелевойПуть)

	КаталогНайден = Ложь;
	Попытка
		СвойстваПапки = ЯДиск.ПолучитьСвойстваРесурса(ЦелевойПуть);
		КаталогНайден = Истина;
	Исключение
		СвойстваПапки = Новый Структура("type", "dir");
	КонецПопытки;

	Если СвойстваПапки["type"] <> "dir" Тогда
		ТекстОшибки = СтрШаблон("Ошибка при создании папки  Яндекс-Диска: %1", ЦелевойПуть);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;

	ТекущийПуть = "";
	Если НЕ КаталогНайден Тогда
		Попытка
			ЯДиск.СоздатьПапку(ЦелевойПуть);
		Исключение
			ТекстОшибки = СтрШаблон("Ошибка при создании папки %1: %2%3",
			                        ЦелевойПуть,
			                        Символы.ПС,
			                        ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение ТекстОшибки;
		КонецПопытки;
	КонецЕсли;
	
	Возврат ТекущийПуть;

КонецФункции // СоздатьПапкуНаЯДиске()

#КонецОбласти // СлужебныеПроцедурыИФункции

#Область ОбработчикиСобытий

// Процедура - обработчик события "ПриСозданииОбъекта"
//
// BSLLS:UnusedLocalMethod-off
Процедура ПриСозданииОбъекта()

	Лог = ПараметрыПриложения.Лог();

КонецПроцедуры // ПриСозданииОбъекта()
// BSLLS:UnusedLocalMethod-on

#КонецОбласти // ОбработчикиСобытий
