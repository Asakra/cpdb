// ----------------------------------------------------------
// This Source Code Form is subject to the terms of the
// Mozilla Public License, v.2.0. If a copy of the MPL
// was not distributed with this file, You can obtain one
// at http://mozilla.org/MPL/2.0/.
// ----------------------------------------------------------
// Codebase: https://github.com/ArKuznetsov/cpdb/
// ----------------------------------------------------------

#Использовать 1commands
#Использовать fs

Перем Лог;           // - Объект    - объект записи лога приложения
Перем Сервер;        // - Строка    - адрес сервера СУБД
Перем Пользователь;  // - Строка    - Пользователь сервера СУБД
Перем Пароль;        // - Строка    - Пароль пользователя сервера СУБД

#Область ПрограммныйИнтерфейс

Функция Сервер() Экспорт

	Возврат Сервер;

КонецФункции // Сервер()

Процедура УстановитьСервер(Знач НовоеЗначение) Экспорт

	Сервер = НовоеЗначение;

КонецПроцедуры // УстановитьСервер()

Функция Пользователь() Экспорт

	Возврат Пользователь;

КонецФункции // Пользователь()

Процедура УстановитьПользователь(Знач НовоеЗначение) Экспорт

	Пользователь = НовоеЗначение;

КонецПроцедуры // УстановитьПользователь()

Процедура УстановитьПароль(Знач НовоеЗначение) Экспорт

	Пароль = НовоеЗначение;

КонецПроцедуры // УстановитьПароль()

// Функция проверяет существование базу на сервере СУБД
//
// Параметры:
//   База                              - Строка    - имя базы данных
//   ВариантСообщенияОСуществовании    - Строка    - в каких случаях выводить сообщение о существании БД
//
// Возвращаемое значение:
//   Булево       - Истина - база существует на сервере СУБД
//
Функция БазаСуществует(База, ВариантСообщенияОСуществовании = Неопределено) Экспорт

	ТекстЗапроса = СтрШаблон("""SET NOCOUNT ON;
	                         |SELECT
	                         |	COUNT(name)
	                         |FROM
	                         |	sysdatabases
	                         |WHERE
	                         |	name = '%1';
	                         |
	                         |SET NOCOUNT OFF"" ",
	                         База);
	
	РезультатЗапроса = "";
	КодВозврата = ВыполнитьЗапросСУБД(ТекстЗапроса, РезультатЗапроса);

	Если КодВозврата = 0 Тогда
		РезультатЗапроса = СокрЛП(СтрЗаменить(РезультатЗапроса, "-", ""));
		Результат = РезультатЗапроса = "1";
	Иначе
		ТекстОшибки = СтрШаблон("Ошибка проверки существования базы ""%1"": %2%3",
		                        База,
		                        Символы.ПС,
		                        РезультатЗапроса);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;

	ВариантыСообщения = ВариантыСообщенияОСуществованииБД();

	Если НЕ ЗначениеЗаполнено(ВариантСообщенияОСуществовании) Тогда
		ВариантСообщенияОСуществовании = ВариантыСообщения.НеСообщать;
	КонецЕсли;

	Если ВариантСообщенияОСуществовании = ВариантыСообщения.СообщатьОСуществовании
	   И Результат Тогда
		Лог.Предупреждение("База ""%1"" уже существует!", База);
	ИначеЕсли ВариантСообщенияОСуществовании = ВариантыСообщения.СообщатьОбОтсутствии
	        И НЕ Результат Тогда
		Лог.Предупреждение("База ""%1"" не существует!", База);
	ИначеЕсли Результат Тогда
		Лог.Отладка("База ""%1"" существует!", База);
	Иначе
		Лог.Отладка("База ""%1"" не существует!", База);
	КонецЕсли;

	Возврат Результат;

КонецФункции // БазаСуществует()

// Процедура выполняет команду создания базы на сервере СУБД
//
// Параметры:
//   База                    - Строка    - имя базы данных
//   МодельВосстановления    - Строка    - новая модель восстановления (FULL, SIMPLE, BULK_LOGGED)
//   ПутьККаталогу           - Строка    - путь к каталогу для размещения файлов базы данных
//                                         если не указан, то файлы размещаются в каталоге по умолчанию SQL Server
//   ОшибкаЕслиСуществует    - Строка    - Истина - вызвать исключение если база существует
//
Процедура СоздатьБазу(База,
	                  Знач МодельВосстановления = Неопределено,
	                  Знач ПутьККаталогу = "",
	                  Знач ОшибкаЕслиСуществует = Ложь) Экспорт

	Если БазаСуществует(База, ВариантыСообщенияОСуществованииБД().СообщатьОСуществовании) Тогда
		Если ОшибкаЕслиСуществует Тогда
			ТекстОшибки = СтрШаблон("База ""%1"" уже существует", База);
			ВызватьИсключение ТекстОшибки;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(МодельВосстановления) Тогда
		МодельВосстановления = МоделиВосстановленияБД().Полная;
	КонецЕсли;

	ПутьККаталогу = ФС.ПолныйПуть(ПутьККаталогу);

	Если ЗначениеЗаполнено(ПутьККаталогу) Тогда
		ТекстЗапроса = СтрШаблон("""USE [master];
	                         |
	                         |CREATE DATABASE [%1]
	                         |ON
	                         |( NAME = %1,
	                         |  FILENAME = '%2\%1.mdf')
	                         |LOG ON
	                         |( NAME = %1_log,
	                         |  FILENAME = '%2\%1_log.ldf');
	                         |
	                         |ALTER DATABASE [%1]
	                         |SET RECOVERY %3"" ",
	                         База,
	                         ПутьККаталогу,
	                         МодельВосстановления);
	Иначе
		ТекстЗапроса = СтрШаблон("""USE [master];
	                         |
	                         |CREATE DATABASE [%1];
	                         |
	                         |ALTER DATABASE [%1]
	                         |SET RECOVERY %2"" ",
	                         База,
	                         МодельВосстановления);
	КонецЕсли;

	РезультатЗапроса = "";
	КодВозврата = ВыполнитьЗапросСУБД(ТекстЗапроса, РезультатЗапроса);

	Если НЕ КодВозврата = 0 Тогда
		ТекстОшибки = СтрШаблон("Ошибка создания базы ""%1"": %2%3",
		                        База,
		                        Символы.ПС,
		                        РезультатЗапроса);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;

КонецПроцедуры // СоздатьБазу()

// Процедура выполняет команду удаления базы на сервере СУБД
//
// Параметры:
//   База                      - Строка    - имя базы данных
//   ОшибкаЕслиНеСуществует    - Строка    - Истина - вызвать исключение если база не существует
//
Процедура УдалитьБазу(База, ОшибкаЕслиНеСуществует = Ложь) Экспорт

	Если НЕ БазаСуществует(База, ВариантыСообщенияОСуществованииБД().СообщатьОбОтсутствии) Тогда
		Если ОшибкаЕслиНеСуществует Тогда
			ТекстОшибки = СтрШаблон("База ""%1"" не обнаружена", База);
			ВызватьИсключение ТекстОшибки;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ТекстЗапроса = СтрШаблон("""USE [master];
	                         |
	                         |DROP DATABASE [%1]"" ",
	                         База);
	
	РезультатЗапроса = "";
	КодВозврата = ВыполнитьЗапросСУБД(ТекстЗапроса, РезультатЗапроса);

	Если НЕ КодВозврата = 0 Тогда
		ТекстОшибки = СтрШаблон("Ошибка удаления базы ""%1"": %2%3",
		                        База,
		                        Символы.ПС,
		                        РезультатЗапроса);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;

КонецПроцедуры // УдалитьБазу()

// Функция получает модель восстановления базы
//
// Параметры:
//   База    - Строка    - имя базы данных
//
// Возвращаемое значение:
//   Строка    - модель восстановления (FULL, SIMPLE, BULK_LOGGED)
//
Функция ПолучитьМодельВосстановления(База) Экспорт

	Если НЕ БазаСуществует(База, ВариантыСообщенияОСуществованииБД().СообщатьОбОтсутствии) Тогда
		ТекстОшибки = СтрШаблон("База ""%1"" не обнаружена", База);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;

	ТекстЗапроса = СтрШаблон("""SET NOCOUNT ON;
	                         |
	                         |SELECT
	                         |  [recovery_model_desc] AS Recovery_model
	                         |FROM sys.databases
	                         |
	                         |WHERE name = '%1';
	                         |
	                         |SET NOCOUNT OFF;"" ",
	                         База);
	
	РезультатЗапроса = "";
	КодВозврата = ВыполнитьЗапросСУБД(ТекстЗапроса, РезультатЗапроса);
	
	Если КодВозврата = 0 Тогда
		Разделитель = "---";
		Поз = СтрНайти(РезультатЗапроса, Разделитель, НаправлениеПоиска.FromEnd);
		Если Поз > 0 Тогда
			РезультатЗапроса = ВРег(СокрЛП(Сред(РезультатЗапроса, Поз + СтрДлина(Разделитель))));
		КонецЕсли;
	Иначе
		ТекстОшибки = СтрШаблон("Ошибка получения модели восстановления базы ""%1"": %2%3",
		                        База,
		                        Символы.ПС,
		                        РезультатЗапроса);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;

	Возврат РезультатЗапроса;
	
КонецФункции // ПолучитьМодельВосстановления()

// Процедура устанавливает модель восстановления базы
//
// Параметры:
//   База                    - Строка    - имя базы данных
//   МодельВосстановления    - Строка    - новая модель восстановления (FULL, SIMPLE, BULK_LOGGED)
//
Процедура УстановитьМодельВосстановления(База, МодельВосстановления = Неопределено) Экспорт

	Если Найти("FULL,SIMPLE,BULK_LOGGED", ВРег(МодельВосстановления)) = 0 Тогда
		ТекстОшибки = СтрШаблон("Указана некорректная модель восстановления ""%1""
		                        | (возможные значения: ""FULL"", ""SIMPLE"", ""BULK_LOGGED"")!",
		                        МодельВосстановления);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;

	Если НЕ БазаСуществует(База, ВариантыСообщенияОСуществованииБД().СообщатьОбОтсутствии) Тогда
		ТекстОшибки = СтрШаблон("База ""%1"" не обнаружена", База);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;

	ТекстЗапроса = СтрШаблон("""USE [master];
	                         |
	                         |ALTER DATABASE %1
	                         |SET RECOVERY %2"" ",
	                         База,
	                         ВРег(МодельВосстановления));

	РезультатЗапроса = "";
	КодВозврата = ВыполнитьЗапросСУБД(ТекстЗапроса, РезультатЗапроса);
	
	Если НЕ КодВозврата = 0 Тогда
		ТекстОшибки = СтрШаблон("Ошибка получения модели восстановления базы ""%1"": %2%3",
		                        База,
		                        Символы.ПС,
		                        РезультатЗапроса);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;

КонецПроцедуры // УстановитьМодельВосстановления()

// Функция изменяет владельца базы
//
// Параметры:
//   База    - Строка    - имя базы данных
//
// Возвращаемое значение:
//   Строка    - имя текущего владельца базы
//
Функция ПолучитьВладельцаБазы(База) Экспорт

	Если НЕ БазаСуществует(База, ВариантыСообщенияОСуществованииБД().СообщатьОбОтсутствии) Тогда
		ТекстОшибки = СтрШаблон("База ""%1"" не обнаружена", База);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;

	ТекстЗапроса = СтрШаблон("""SET NOCOUNT ON;
	                         |
	                         |SELECT
	                         |  logins.name AS login
	                         |
                             |FROM sys.databases AS databases
                             |LEFT JOIN sys.syslogins AS logins
                             |ON databases.owner_sid = logins.sid
	                         |
                             |WHERE databases.name = '%1'
                             |
                             |SET NOCOUNT OFF;"" ",
                             База);
	
	РезультатЗапроса = "";
	КодВозврата = ВыполнитьЗапросСУБД(ТекстЗапроса, РезультатЗапроса);
	
	Если КодВозврата = 0 Тогда
		Разделитель = "---";
		Поз = СтрНайти(РезультатЗапроса, Разделитель, НаправлениеПоиска.FromEnd);
		Если Поз > 0 Тогда
			РезультатЗапроса = СокрЛП(Сред(РезультатЗапроса, Поз + СтрДлина(Разделитель)));
		КонецЕсли;
	Иначе
		ТекстОшибки = СтрШаблон("Ошибка получения владельца базы ""%1"": %2%3",
		                        База,
		                        Символы.ПС,
		                        РезультатЗапроса);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;

	Возврат РезультатЗапроса;
	
КонецФункции // ПолучитьВладельцаБазы()

// Процедура изменяет владельца базы
//
// Параметры:
//   База                - Строка    - имя базы данных
//   НовыйВладелец       - Строка    - новый владелец базы
//
Процедура УстановитьВладельцаБазы(База, НовыйВладелец) Экспорт

	Если НЕ БазаСуществует(База, ВариантыСообщенияОСуществованииБД().СообщатьОбОтсутствии) Тогда
		ТекстОшибки = СтрШаблон("База ""%1"" не обнаружена", База);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;

	РезультатЗапроса = "";
	ТекстЗапроса = СтрШаблон("""ALTER AUTHORIZATION ON DATABASE::%1 TO %2""", База, НовыйВладелец);

	КодВозврата = ВыполнитьЗапросСУБД(ТекстЗапроса, РезультатЗапроса);

	Если НЕ КодВозврата = 0 Тогда
		ТекстОшибки = СтрШаблон("Ошибка изменения владельца базы ""%1"": %2%3",
		                        База,
		                        Символы.ПС,
		                        РезультатЗапроса);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;

КонецПроцедуры // УстановитьВладельцаБазы()

// Процедура выполняет сжатие базы (shrink)
//
// Параметры:
//   База                - Строка    - имя базы данных
//
Процедура СжатьБазу(База) Экспорт

	Если НЕ БазаСуществует(База, ВариантыСообщенияОСуществованииБД().СообщатьОбОтсутствии) Тогда
		ТекстОшибки = СтрШаблон("База ""%1"" не обнаружена", База);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;

	ТекстЗапроса = СтрШаблон("""DBCC SHRINKDATABASE(N'%1', 0)""", База);
	
	РезультатЗапроса = "";
	КодВозврата = ВыполнитьЗапросСУБД(ТекстЗапроса, РезультатЗапроса);

	Если НЕ КодВозврата = 0 Тогда
		ТекстОшибки = СтрШаблон("Ошибка сжатия (shrink) файла данных базы ""%1"": %2%3",
		                        База,
		                        Символы.ПС,
		                        РезультатЗапроса);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;

КонецПроцедуры // СжатьБазу()

// Процедура выполняет сжатие файла лог (shrink)
//
// Параметры:
//   База                - Строка    - Имя базы данных
//
Процедура СжатьФайлЖурналаТранзакций(База) Экспорт

	Если НЕ БазаСуществует(База, ВариантыСообщенияОСуществованииБД().СообщатьОбОтсутствии) Тогда
		ТекстОшибки = СтрШаблон("База ""%1"" не обнаружена", База);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	ЛогическоеИмяФайлаЖурнала = ПолучитьЛогическоеИмяФайлаВБазе(База, "L");

	ТекстЗапроса = СтрШаблон("""USE [%1];
	                         |
	                         |DBCC SHRINKFILE(N'%2', 0, TRUNCATEONLY); "" ",
	                         База,
	                         ЛогическоеИмяФайлаЖурнала);

	РезультатЗапроса = "";
	КодВозврата = ВыполнитьЗапросСУБД(ТекстЗапроса, РезультатЗапроса);

	Если НЕ КодВозврата = 0 Тогда
		ТекстОшибки = СтрШаблон("Ошибка сжатия (shrink) файла журнала базы ""%1"": %2%3",
		                        База,
		                        Символы.ПС,
		                        РезультатЗапроса);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;

КонецПроцедуры // СжатьФайлЖурналаТранзакций()

// Процедура выполняет выполняет компрессию базы и индексов на уровне страниц (DATA_COMPRESSION = PAGE)
//
// Параметры:
//   База                  - Строка    - имя базы данных
//   КомпрессияТаблиц      - Булево    - Истина - будет выполнена компрессия таблиц базы
//   КомпрессияИндексов    - Булево    - Истина - будет выполнена компрессия индексов базы
//
Процедура ВключитьКомпрессиюСтраниц(База,
                                    КомпрессияТаблиц = Истина,
                                    КомпрессияИндексов = Истина) Экспорт

	ОписаниеВерсии = ПолучитьВерсиюСУБД();

	Если НЕ ДоступностьФункционалаСУБД("Компрессия", ОписаниеВерсии) Тогда
		Лог.Предупреждение("Для данной версии СУБД ""MS SQL Server %1 %2""
		                   |не доступна функциональность компресии страниц!",
		                   ОписаниеВерсии.Версия,
		                   ОписаниеВерсии.Редакция);
		Возврат;
	КонецЕсли;

	Если НЕ (КомпрессияТаблиц ИЛИ КомпрессияИндексов) Тогда
		Лог.Предупреждение("Не указан флаг включения компрессии страниц для индексов или таблиц!");
		Возврат;
	КонецЕсли;

	Если НЕ БазаСуществует(База, ВариантыСообщенияОСуществованииБД().СообщатьОбОтсутствии) Тогда
		ТекстОшибки = СтрШаблон("База ""%1"" не обнаружена", База);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;

	ТекстЗапроса = СтрШаблон("""USE [%1];", База);
	Если КомпрессияТаблиц Тогда
		ТекстЗапроса = СтрШаблон("%1%2EXEC sp_MSforeachtable 'ALTER TABLE ? REBUILD WITH (DATA_COMPRESSION = PAGE)'",
		                         ТекстЗапроса,
		                         Символы.ПС);
	КонецЕсли;

	Если КомпрессияИндексов Тогда
		ТекстЗапроса = СтрШаблон("%1%2EXEC sp_MSforeachtable 'ALTER INDEX ALL ON ? REBUILD WITH (DATA_COMPRESSION = PAGE)'",
		                         ТекстЗапроса,
		                         Символы.ПС);
	КонецЕсли;

	ТекстЗапроса = СтрШаблон("%1""", ТекстЗапроса);

	РезультатЗапроса = "";
	КодВозврата = ВыполнитьЗапросСУБД(ТекстЗапроса, РезультатЗапроса);

	Если НЕ КодВозврата = 0 Тогда
		ТекстОшибки = СтрШаблон("Ошибка компресии базы ""%1"": %2%3",
		                        База,
		                        Символы.ПС,
		                        РезультатЗапроса);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;

КонецПроцедуры // ВключитьКомпрессиюСтраниц()

// Процедура создает файл резервной копии базы
//
// Параметры:
//   База                   - Строка    - имя базы данных
//   ПутьКРезервнойКопии    - Строка    - путь к файлу резервной копии
//
Процедура СоздатьРезервнуюКопию(База, Знач ПутьКРезервнойКопии) Экспорт
	
	Если НЕ БазаСуществует(База, ВариантыСообщенияОСуществованииБД().СообщатьОбОтсутствии) Тогда
		ТекстОшибки = СтрШаблон("База ""%1"" не обнаружена", База);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;

	ПутьКРезервнойКопии = ФС.ПолныйПуть(ПутьКРезервнойКопии);

	ТекстЗапроса = СтрШаблон("""BACKUP DATABASE [%1] TO DISK = N'%2'
	                         |WITH NOFORMAT, INIT, NAME = N'%1 FULL Backup',
	                         |SKIP,
	                         |NOREWIND,
	                         |NOUNLOAD,
	                         |COMPRESSION,
	                         |STATS = 10"" ",
	                         База,
	                         ПутьКРезервнойКопии);

							 РезультатЗапроса = "";
	КодВозврата = ВыполнитьЗапросСУБД(ТекстЗапроса, РезультатЗапроса);

	Если НЕ КодВозврата = 0 Тогда
		ТекстОшибки = СтрШаблон("Ошибка резервного копирования базы ""%1"" в файл ""%2"": %3%4",
		                        База,
		                        ПутьКРезервнойКопии,
		                        Символы.ПС,
		                        РезультатЗапроса);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;

КонецПроцедуры // СоздатьРезервнуюКопию()

// Процедура выполняет восстановление базы из файла с резервной копией
//
// Параметры:
//   База                   - Строка    - имя базы данных
//   ПутьКРезервнойКопии    - Строка    - путь к файлу резервной копии
//   ПутьКФайлуДанных       - Строка    - путь к файлу базы
//   ПутьКФайлуЖурнала      - Строка    - путь к файлу журнала (transaction log) базы
//   СоздаватьБазу          - Булево    - Истина - будет создана новая база в случае отсутствия
//
Процедура ВосстановитьИзРезервнойКопии(База,
                                     Знач ПутьКРезервнойКопии,
                                     Знач ПутьКФайлуДанных = "",
                                     Знач ПутьКФайлуЖурнала = "",
                                     СоздаватьБазу = Ложь) Экспорт
	
	Если НЕ БазаСуществует(База, ВариантыСообщенияОСуществованииБД().СообщатьОбОтсутствии) Тогда
		Если НЕ СоздаватьБазу Тогда
			ТекстОшибки = СтрШаблон("База ""%1"" не обнаружена", База);
			ВызватьИсключение ТекстОшибки;
		Иначе
			СоздатьБазу(База, МоделиВосстановленияБД().Простая);
		КонецЕсли;
	КонецЕсли;

	ПутьКРезервнойКопии = ФС.ПолныйПуть(ПутьКРезервнойКопии);

	Если ЗначениеЗаполнено(ПутьКФайлуДанных) Тогда
		ПутьКФайлуДанных = ФС.ПолныйПуть(ПутьКФайлуДанных);
	Иначе
		ПутьКФайлуДанных = РасположениеФайловБазПоУмолчанию("D");
	КонецЕсли;

	Если ЗначениеЗаполнено(ПутьКФайлуЖурнала) Тогда
		ПутьКФайлуЖурнала = ФС.ПолныйПуть(ПутьКФайлуЖурнала);
	Иначе
		ПутьКФайлуЖурнала = РасположениеФайловБазПоУмолчанию("L");
	КонецЕсли;
	
	ЛогическоеИмяФайлаДанных = ПолучитьЛогическоеИмяФайлаВРезервнойКопии(ПутьКРезервнойКопии, "D");
	ЛогическоеИмяФайлаЖурнала = ПолучитьЛогическоеИмяФайлаВРезервнойКопии(ПутьКРезервнойКопии, "L");

	ТекстЗапроса = СтрШаблон("""USE [master];
	                         |
	                         |ALTER DATABASE [%1] SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
	                         |
	                         |RESTORE DATABASE [%1] FROM  DISK = N'%2' WITH  FILE = 1,
	                         |MOVE N'%3' TO N'%4\%1.mdf',
	                         |MOVE N'%5' TO N'%6\%1_log.ldf',
	                         |NOUNLOAD,  REPLACE,  STATS = 10;
	                         |
	                         |ALTER DATABASE [%1] SET MULTI_USER"" ",
	                         База,
	                         ПутьКРезервнойКопии,
	                         ЛогическоеИмяФайлаДанных,
	                         ПутьКФайлуДанных,
	                         ЛогическоеИмяФайлаЖурнала,
	                         ПутьКФайлуЖурнала);
	
	РезультатЗапроса = "";	
	КодВозврата = ВыполнитьЗапросСУБД(ТекстЗапроса, РезультатЗапроса);

	Если НЕ КодВозврата = 0 Тогда
		ТекстОшибки = СтрШаблон("Ошибка восстановления базы ""%1"" из резервной копии ""%2"": %3%4",
		                        ПутьКРезервнойКопии,
		                        База,
		                        Символы.ПС,
		                        РезультатЗапроса);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;

КонецПроцедуры // ВосстановитьИзРезервнойКопии()

// Функция возвращает логическое имя файла в резервной копии
//
// Параметры:
//   ПутьКРезервнойКопии    - Строка    - путь к файлу резервной копии
//   ТипФайла               - Строка    - D - файл данных; L - файл журнала транзакций
//
// Возвращаемое значение:
//   Строка    - логическое имя файла базы в файле резервной копии
//
Функция ПолучитьЛогическоеИмяФайлаВРезервнойКопии(Знач ПутьКРезервнойКопии, Знач ТипФайла = Неопределено) Экспорт
	
	ТипыФайлов = ТипыФайловБД();
	ТипыФайловСокр = ТипыФайловБД(Истина);

	Если НЕ ЗначениеЗаполнено(ТипФайла) Тогда
		ТипФайла = ТипыФайловСокр.Данные;
	КонецЕсли;

	Если ТипФайла = ТипыФайлов.Данные ИЛИ ТипФайла = ТипыФайловСокр.Данные Тогда
		ТипФайла = ТипыФайловСокр.Данные;
		ТипФайлаПредставление = "данных";
	ИначеЕсли ТипФайла = ТипыФайлов.Журнал ИЛИ ТипФайла = ТипыФайловСокр.Журнал Тогда
		ТипФайла = ТипыФайловСокр.Журнал;
		ТипФайлаПредставление = "журнала";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	ПутьКРезервнойКопии = ФС.ПолныйПуть(ПутьКРезервнойКопии);

	ТекстЗапроса = СтрШаблон("""SET NOCOUNT ON;
	                         |
	                         |DECLARE @T1CTmp TABLE (%1);
	                         |
	                         |INSERT INTO @T1CTmp EXECUTE('RESTORE FILELISTONLY FROM DISK = N''%2''');
	                         |
	                         |SELECT
	                         |	[LogicalName]
	                         |FROM
	                         |	@T1CTmp
	                         |WHERE
	                         |	[Type] = '%3';
	                         |
	                         |SET NOCOUNT OFF;"" ",
	                         ПоляТаблицыФайловРезервнойКопии(),
	                         ПутьКРезервнойКопии,
	                         ВРег(ТипФайла));
	
	РезультатЗапроса = "";
	КодВозврата = ВыполнитьЗапросСУБД(ТекстЗапроса, РезультатЗапроса);

	Если КодВозврата = 0 Тогда
		Разделитель = "---";
		Поз = СтрНайти(РезультатЗапроса, Разделитель, НаправлениеПоиска.FromEnd);
		Если Поз > 0 Тогда
			РезультатЗапроса = СокрЛП(Сред(РезультатЗапроса, Поз + СтрДлина(Разделитель)));
		КонецЕсли;
	Иначе
		ТекстОшибки = СтрШаблон("Ошибка получения логического имени файла %1 в резервной копии ""%2"": %3%4",
		                        ТипФайлаПредставление,
		                        ПутьКРезервнойКопии,
		                        Символы.ПС,
		                        РезультатЗапроса);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;

	Возврат РезультатЗапроса;

КонецФункции // ПолучитьЛогическоеИмяФайлаВРезервнойКопии()
	
// Функция возвращает логическое имя файла в базе
//
// Параметры:
//   База        - Строка    - имя базы данных
//   ТипФайла    - Строка    - ROWS - файл базы; LOG - файл журнала транзакций
//
// Возвращаемое значение:
//   Строка     - логическое имя файла базы
//
Функция ПолучитьЛогическоеИмяФайлаВБазе(База, Знач ТипФайла = Неопределено) Экспорт
	
	ТипыФайлов = ТипыФайловБД();
	ТипыФайловСокр = ТипыФайловБД(Истина);

	Если НЕ ЗначениеЗаполнено(ТипФайла) Тогда
		ТипФайла = ТипыФайлов.Данные;
	КонецЕсли;

	Если ТипФайла = ТипыФайлов.Данные ИЛИ ТипФайла = ТипыФайловСокр.Данные Тогда
		ТипФайла = ТипыФайлов.Данные;
		ТипФайлаПредставление = "данных";
	ИначеЕсли ТипФайла = ТипыФайлов.Журнал ИЛИ ТипФайла = ТипыФайловСокр.Журнал Тогда
		ТипФайла = ТипыФайлов.Журнал;
		ТипФайлаПредставление = "журнала";
	Иначе
		ТекстОшибки = СтрШаблон("Некорректно указан тип файла ""%1"" для получения логического имени,
		                        | ожидается ""ROWS (D) ИЛИ LOG (L).",
		                        ТипФайла);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Если НЕ БазаСуществует(База, ВариантыСообщенияОСуществованииБД().СообщатьОбОтсутствии) Тогда
		ТекстОшибки = СтрШаблон("База ""%1"" не обнаружена", База);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;

	ТекстЗапроса = СтрШаблон("""SET NOCOUNT ON;
	                         |
	                         |SELECT
	                         |	[name]
	                         |FROM
	                         |	sys.master_files
	                         |WHERE
	                         |	[database_id]=db_id('%1')
	                         |		AND type_desc='%2';
	                         |
	                         |SET NOCOUNT OFF;"" ",
	                         База,
	                         ТипФайла);
	
	РезультатЗапроса = "";
	КодВозврата = ВыполнитьЗапросСУБД(ТекстЗапроса, РезультатЗапроса);

	Если КодВозврата = 0 Тогда
		Разделитель = "---";
		Поз = СтрНайти(РезультатЗапроса, Разделитель, НаправлениеПоиска.FromEnd);
		Если Поз > 0 Тогда
			РезультатЗапроса = СокрЛП(Сред(РезультатЗапроса, Поз + СтрДлина(Разделитель)));
		КонецЕсли;
	Иначе
		ТекстОшибки = СтрШаблон("Ошибка получения логического имени файла %1 в базе ""%2"": %3%4",
		                        ТипФайлаПредставление,
		                        База,
		                        Символы.ПС,
		                        РезультатЗапроса);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;

	Возврат РезультатЗапроса;

КонецФункции // ПолучитьЛогическоеИмяФайлаВБазе()

// Процедура изменяет логическое имя файла базы
//
// Параметры:
//   База                - Строка    - имя базы данных
//   Имя                 - Строка    - логическое имя изменяемого файла
//   НовоеИмя            - Строка    - новое логическое имя
//
Процедура ИзменитьЛогическоеИмяФайлаВБазе(База, Имя, НовоеИмя) Экспорт

	Если Имя = НовоеИмя Тогда
		Лог.Предупреждение("Новое логическое имя ""%1"" совпадает со старым ""%2""!", Имя, НовоеИмя);
		Возврат;
	КонецЕсли;

	Если НЕ БазаСуществует(База, ВариантыСообщенияОСуществованииБД().СообщатьОбОтсутствии) Тогда
		ТекстОшибки = СтрШаблон("База ""%1"" не обнаружена", База);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;

	ТекстЗапроса = СтрШаблон("""USE [master];
	                         |
	                         |ALTER DATABASE [%1]
	                         |MODIFY FILE (NAME = N'%2', NEWNAME = N'%3');"" ",
	                         База,
	                         Имя,
	                         НовоеИмя);

	РезультатЗапроса = "";
	КодВозврата = ВыполнитьЗапросСУБД(ТекстЗапроса, РезультатЗапроса);

	Если НЕ КодВозврата = 0 Тогда
		ТекстОшибки = СтрШаблон("Ошибка изменения логического имени файла ""%1"" базы ""%2"" на ""%3"": %4%5",
		                        Имя,
		                        База,
		                        НовоеИмя,
		                        Символы.ПС,
		                        РезультатЗапроса);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;

КонецПроцедуры // ИзменитьЛогическоеИмяФайлаВБазе()

// Функция возвращает логическое имя файла в базе
//
// Параметры:
//   ТипФайла    - Строка    - ROWS - файл базы; LOG - файл журнала транзакций
//
// Возвращаемое значение:
//   Строка    - логическое имя файла базы
//
Функция РасположениеФайловБазПоУмолчанию(Знач ТипФайла = Неопределено) Экспорт
	
	ТипыФайлов = ТипыФайловБД();
	ТипыФайловСокр = ТипыФайловБД(Истина);

	Если НЕ ЗначениеЗаполнено(ТипФайла) Тогда
		ТипФайла = ТипыФайлов.Данные;
	КонецЕсли;

	Если ТипФайла = ТипыФайлов.Данные ИЛИ ТипФайла = ТипыФайловСокр.Данные Тогда
		ТипФайла = ТипыФайлов.Данные;
		ТипФайлаПредставление = "данных";
	ИначеЕсли ТипФайла = ТипыФайлов.Журнал ИЛИ ТипФайла = ТипыФайловСокр.Журнал Тогда
		ТипФайла = ТипыФайлов.Журнал;
		ТипФайлаПредставление = "журналов";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	

	ТекстЗапроса = СтрШаблон("""SET NOCOUNT ON;
	                         |
	                         |SELECT
	                         |	[physical_name]
	                         |FROM
	                         |	sys.master_files
	                         |WHERE
	                         |	[database_id]=4
	                         |		AND type_desc='%1';
	                         |
	                         |SET NOCOUNT OFF;"" ",
	                         ТипФайла);
	
	РезультатЗапроса = "";
	КодВозврата = ВыполнитьЗапросСУБД(ТекстЗапроса, РезультатЗапроса);

	Если КодВозврата = 0 Тогда
		Разделитель = "---";
		Поз = СтрНайти(РезультатЗапроса, Разделитель, НаправлениеПоиска.FromEnd);
		Если Поз > 0 Тогда
			РезультатЗапроса = СокрЛП(Сред(РезультатЗапроса, Поз + СтрДлина(Разделитель)));
		КонецЕсли;

		ФайлБазы = Новый Файл(РезультатЗапроса);
		РезультатЗапроса = Сред(ФайлБазы.Путь, 1, СтрДлина(ФайлБазы.Путь) - 1);

	Иначе
		ТекстОшибки = СтрШаблон("Ошибка получения расположения по умолчанию файлов %1: %2%3",
		                        ТипФайлаПредставление,
		                        Символы.ПС,
		                        РезультатЗапроса);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;

	Возврат РезультатЗапроса;

КонецФункции // РасположениеФайловБазПоУмолчанию()

// Функция возвращает описание установленной версии SQL Server
//
// Возвращаемое значение:
//   Структура                        - описание версии SQL Server
//     *ИмяСервера           - Строка    - имя сервера
//     *ИмяЭкземпляраСУБД    - Строка    - имя экземпляра СУБД на сервере
//     *Редакция             - Строка    - номер редакции
//     *Версия               - Строка    - номер версии
//     *Уровень              - Строка    - уровень продукта
//     *ВерсияМакс           - Строка    - старший номер версии (2000 - 2000 (8)), 2005 - 9,
//                                                               2008 - 10, 2012 - 11, 2014 - 12, 2016 - 13)
//     *Корп                 - Строка    - признак Enterprise версии
//
Функция ПолучитьВерсиюСУБД() Экспорт
	
	ТекстЗапроса = """SET NOCOUNT ON;
	               |SELECT
	               |  SERVERPROPERTY('MachineName') AS ComputerName,
	               |  SERVERPROPERTY('ServerName') AS InstanceName,
	               |  SERVERPROPERTY('Edition') AS Edition,
	               |  SERVERPROPERTY('ProductVersion') AS ProductVersion,
	               |  SERVERPROPERTY('ProductLevel') AS ProductLevel,
	               |  @@VERSION AS FullVersion;
	               |SET NOCOUNT OFF;"" ";

	РезультатЗапроса = "";
	КодВозврата = ВыполнитьЗапросСУБД(ТекстЗапроса, РезультатЗапроса, "|", Истина);

	Если КодВозврата = 0 Тогда
		Разделитель = "---";
		Поз = СтрНайти(РезультатЗапроса, Разделитель, НаправлениеПоиска.FromEnd);
		Если Поз > 0 Тогда
			РезультатЗапроса = СокрЛП(Сред(РезультатЗапроса, Поз + СтрДлина(Разделитель)));
		КонецЕсли;
	Иначе
		ТекстОшибки = СтрШаблон("Ошибка получения версии СУБД: %1%2",
		                        Символы.ПС,
		                        РезультатЗапроса);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;

	ИмяСервера           = 0;
	ИмяЭкземпляраСУБД    = 1;
	Редакция             = 2;
	Версия               = 3;
	Уровень              = 4;
	Представление        = 5;
	
	// 2000 - 2000 (8)), 2005 - 9, 2008 - 10, 2012 - 11, 2014 - 12, 2016 - 13, 2017 - 14, 2019 - 15
	МассивВерсий = СтрРазделить("2000-8,9,10,11,12,13,14,15", ",");

	СоответствиеВерсий = Новый Соответствие();

	Для Каждого ТекВерсия Из МассивВерсий Цикл
		ЧастиВерсии = СтрРазделить(ТекВерсия, "-");

		КоличествоЧастей = ЧастиВерсии.Количество();
		Если КоличествоЧастей = 1 Тогда
			СоответствиеВерсий.Вставить(ЧастиВерсии[0], Число(ЧастиВерсии[0]));
		ИначеЕсли КоличествоЧастей > 1 Тогда
			СоответствиеВерсий.Вставить(ЧастиВерсии[0], Число(ЧастиВерсии[1]));
		Иначе
			Возврат Неопределено;
		КонецЕсли;	
	КонецЦикла;
	
	СтруктураРезультата = Новый Структура();

	МассивЗначений = СтрРазделить(РезультатЗапроса, "|", Ложь);

	СтруктураРезультата.Вставить("ИмяСервера"       , МассивЗначений[ИмяСервера]);
	СтруктураРезультата.Вставить("ИмяЭкземпляраСУБД", МассивЗначений[ИмяЭкземпляраСУБД]);
	СтруктураРезультата.Вставить("Редакция"         , МассивЗначений[Редакция]);
	СтруктураРезультата.Вставить("Версия"           , МассивЗначений[Версия]);
	СтруктураРезультата.Вставить("Уровень"          , МассивЗначений[Уровень]);
	СтруктураРезультата.Вставить("Представление"    , МассивЗначений[Представление]);
	
	МассивВерсии = СтрРазделить(СтруктураРезультата["Версия"], ".");
	СтруктураРезультата.Вставить("ВерсияМакс"       , СоответствиеВерсий[МассивВерсии[0]]);

	СтруктураРезультата.Вставить("Корп"             , СтрНайти(ВРег(СтруктураРезультата["Редакция"]), "ENTERPRISE") > 0);

	Возврат СтруктураРезультата;

КонецФункции // ПолучитьВерсиюСУБД()

// Функция возвращает признак доступности функционала SQL Server
//
// Параметры:
//   Функционал           - Строка          - наименование проверяемого функционала
//   ОписаниеВерсии        - Соответствие    - описание версии SQL Server
//     *ИмяСервера           - Строка          - имя сервера
//     *ИмяЭкземпляраСУБД    - Строка          - имя экземпляра СУБД на сервере
//     *Редакция             - Строка          - номер редакции
//     *Версия               - Строка          - номер версии
//     *Уровень              - Строка          - уровень продукта
//     *ВерсияМакс           - Строка          - старший номер версии (2000 - 2000 (8)), 2005 - 9,
//                                                                     2008 - 10, 2012 - 11, 2014 - 12, 2016 - 13)
//     *Корп                 - Строка          - признак Enterprise версии
//
// Возвращаемое значение:
//   Булево    - Истина - функционал доступен
//
Функция ДоступностьФункционалаСУБД(Знач Функционал, ОписаниеВерсии = Неопределено) Экспорт

	МинВерсияАвторизации = 10;
	МинВерсияКомпрессии = 13;

	СтруктураФункционала = Новый Структура("Компрессия, ИзменениеАвторизации", Ложь, Ложь);

	Если НЕ ТипЗнч(ОписаниеВерсии) = Тип("Соответствие") Тогда
		ОписаниеВерсии = ПолучитьВерсиюСУБД();
	КонецЕсли;

	Если ОписаниеВерсии = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	Если ОписаниеВерсии.ВерсияМакс >= МинВерсияАвторизации Тогда
		СтруктураФункционала.ИзменениеАвторизации = Истина;
	КонецЕсли;

	Если ОписаниеВерсии.ВерсияМакс >= МинВерсияКомпрессии ИЛИ ОписаниеВерсии.Корп Тогда
		СтруктураФункционала.Компрессия = Истина;
	КонецЕсли;

	Если НЕ СтруктураФункционала.Свойство(Функционал) Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат СтруктураФункционала[Функционал];

КонецФункции // ДоступностьФункционалаСУБД()

// Функция выполняет запрос к СУБД (используется консольная утилита sqlcmd)
//
// Параметры:
//   ТекстЗапроса        - Строка    - текст исполняемого запроса
//   РезультатЗапроса    - Строка    - результат выполнения команду
//   Разделитель         - Строка    - символ - разделитель колонок результата
//   УбратьПробелы       - Булево    - Истина - будут убраны выравнивающие пробелы из результата
//
// Возвращаемое значение:
//   Булево    - Истина - команда выполнена успешно
//
Функция ВыполнитьЗапросСУБД(ТекстЗапроса, РезультатЗапроса = "", Разделитель = "", УбратьПробелы = Ложь) Экспорт

	Лог.Отладка("Текст запроса: %1", ТекстЗапроса);
	
	КомандаРК = Новый Команда;
	
	КомандаРК.УстановитьКоманду("sqlcmd");
	КомандаРК.ДобавитьПараметр("-S " + Сервер);
	Если ЗначениеЗаполнено(Пользователь) Тогда
		КомандаРК.ДобавитьПараметр("-U " + Пользователь);
		Если ЗначениеЗаполнено(пароль) Тогда
			КомандаРК.ДобавитьПараметр("-P " + Пароль);
		КонецЕсли;
	КонецЕсли;
	КомандаРК.ДобавитьПараметр("-Q " + ТекстЗапроса);
	КомандаРК.ДобавитьПараметр("-b");

	Если ЗначениеЗаполнено(Разделитель) Тогда
		КомандаРК.ДобавитьПараметр(СтрШаблон("-s ""%1""", Разделитель));
	КонецЕсли;

	Если УбратьПробелы Тогда
		КомандаРК.ДобавитьПараметр("-W");
	Иначе
		КомандаРК.ДобавитьПараметр("-y 0");
	КонецЕсли;

	ПутьКФайлуРезультата = ПолучитьИмяВременногоФайла();
	КомандаРК.ДобавитьПараметр(СтрШаблон("-o ""%1""", ПутьКФайлуРезультата));

	КомандаРК.УстановитьИсполнениеЧерезКомандыСистемы( Ложь );
	КомандаРК.ПоказыватьВыводНемедленно( Ложь );
	
	КодВозврата = КомандаРК.Исполнить();

	Если ФС.Существует(ПутьКФайлуРезультата) Тогда
		ТекстРезультата = Новый ТекстовыйДокумент();
		ТекстРезультата.Прочитать(ПутьКФайлуРезультата);
		РезультатЗапроса = СокрЛП(ТекстРезультата.ПолучитьТекст());
		УдалитьФайлы(ПутьКФайлуРезультата);
	Иначе
		РезультатЗапроса = КомандаРК.ПолучитьВывод();
	КонецЕсли;

	Возврат КодВозврата;

КонецФункции // ВыполнитьЗапросСУБД()

// Функция выполняет запрос к СУБД, выполняя текст из файлов скриптов (используется консольная утилита sqlcmd)
//
// Параметры:
//   МассивСкриптов      - Массив из Строка - массив с путями к файлам скриптов
//   МассивПеременных    - Массив из Строка - массив со значениями переменных вида "<Имя>=<Значение>"
//   РезультатЗапроса    - Строка - результат выполнения команды
//
// Возвращаемое значение:
//   Булево    - Истина - команда выполнена успешно
//
Функция ВыполнитьСкриптыЗапросСУБД(МассивСкриптов, МассивПеременных = Неопределено, РезультатЗапроса = "") Экспорт
	
	КомандаРК = Новый Команда;
	
	КомандаРК.УстановитьКоманду("sqlcmd");
	КомандаРК.ДобавитьПараметр("-S " + Сервер);
	Если ЗначениеЗаполнено(Пользователь) Тогда
		КомандаРК.ДобавитьПараметр("-U " + Пользователь);
		Если ЗначениеЗаполнено(пароль) Тогда
			КомандаРК.ДобавитьПараметр("-P " + Пароль);
		КонецЕсли;
	КонецЕсли;

	Для каждого Файл Из МассивСкриптов Цикл
		Лог.Отладка("Добавлен файл скрипта: %1", Файл);

		КомандаРК.ДобавитьПараметр(СтрШаблон("-i %1", Файл));		
	КонецЦикла;
	
	Если ТипЗнч(МассивПеременных) = Тип("Массив") Тогда
		Для каждого Переменная Из МассивПеременных Цикл
			Лог.Отладка("Добавлено значение переменной: %1", Переменная);
			
			КомандаРК.ДобавитьПараметр(СтрШаблон("-v %1", Переменная));		
		КонецЦикла;
	КонецЕсли;

	КомандаРК.ДобавитьПараметр("-b");

	КомандаРК.УстановитьИсполнениеЧерезКомандыСистемы( Ложь );
	КомандаРК.ПоказыватьВыводНемедленно( Ложь );
	
	КодВозврата = КомандаРК.Исполнить();

	РезультатЗапроса = КомандаРК.ПолучитьВывод();

	Возврат КодВозврата;

КонецФункции // ВыполнитьСкриптыЗапросСУБД()

#КонецОбласти // ПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

// Функция возвращает список полей таблицы информации о резервной копии
//
// Возвращаемое значение:
//   Строка    - список полей таблицы с информацией о резервной копии (разделенный ",")
//
Функция ПоляТаблицыФайловРезервнойКопии()

	ОписаниеПолей = "[LogicalName] nvarchar(128),
	                |[PhysicalName] nvarchar(260),
	                |[Type] char(1),
	                |[FileGroupName] nvarchar(128),
	                |[Size] numeric(20,0),
	                |[MaxSize] numeric(20,0),
	                |[FileID] bigint,
	                |[CreateLSN] numeric(25,0),
	                |[DropLSN] numeric(25,0) NULL,
	                |[UniqueID] uniqueidentifier,
	                |[ReadOnlyLSN] numeric(25,0) NULL,
	                |[ReadWriteLSN] numeric(25,0) NULL,
	                |[BackupSizeInBytes] bigint,
	                |[SourceBlockSize] int,
	                |[FileGroupID] int,
	                |[LogGroupGUID] uniqueidentifier NULL,
	                |[DifferentialBaseLSN] numeric(25,0) NULL,
	                |[DifferentialBaseGUID] uniqueidentifier,
	                |[IsReadOnly] bit,
	                |[IsPresent] bit,
	                |[TDEThumbprint] varbinary(32)";

	ОписаниеВерсии = ПолучитьВерсиюСУБД();
	
	Версия2016 = 13;

	Если ОписаниеВерсии.ВерсияМакс >= Версия2016 Тогда
		ОписаниеПолей = СтрШаблон("%1,
		                          |[SnapshotUrl] nvarchar(360)",
		                          ОписаниеПолей);
	КонецЕсли;
	
	Возврат ОписаниеПолей;

КонецФункции // ПоляТаблицыФайловРезервнойКопии()

// Функция возвращает список возможных типов файлов базы данных или таблиц резервной копии
//
// Параметры:
//   Сокращенные    - Булево    - Истина - возвращать список сокращенных обозначений
//                                         типов баз (для файлов в файлах резервных копий);
//                                Ложь - список полных обозначений (для файлов баз данных)
//
// Возвращаемое значение:
//   ФиксированнаяСтруктура    - список возможных типов файлов базы данных или таблиц резервной копии
//
Функция ТипыФайловБД(Сокращенные = Ложь)

	ТипыФайлов = Новый Структура();
	ТипыФайлов.Вставить("Данные"    , "ROWS");
	ТипыФайлов.Вставить("Журнал"    , "LOG");

	ТипыФайловСокр = Новый Структура();
	ТипыФайловСокр.Вставить("Данные", "D");
	ТипыФайловСокр.Вставить("Журнал", "L");

	Возврат Новый ФиксированнаяСтруктура(?(Сокращенные, ТипыФайловСокр, ТипыФайлов));

КонецФункции // ТипыФайловБД()

// Функция возвращает список вариантов сообщения о существовании базы данных при проверке
//
// Возвращаемое значение:
//   ФиксированнаяСтруктура    - варианты сообщения о существовании базы данных при проверке
//
Функция ВариантыСообщенияОСуществованииБД()

	ВариантыСообщения = Новый Структура();
	ВариантыСообщения.Вставить("НеСообщать"            , "НЕСООБЩАТЬ");
	ВариантыСообщения.Вставить("СообщатьОСуществовании", "СООБЩАТЬОСУЩЕСТВОВАНИИ");
	ВариантыСообщения.Вставить("СообщатьОбОтсутствии"  , "СООБЩАТЬОБОТСУТСТВИИ");

	Возврат Новый ФиксированнаяСтруктура(ВариантыСообщения);

КонецФункции // ВариантыСообщенияОСуществованииБД()

// Функция возвращает список возможных моделей восстановления базы данных
//
// Возвращаемое значение:
//    ФиксированнаяСтруктура    - возможные модели восстановления базы данных
//
Функция МоделиВосстановленияБД()

	МоделиВосстановления = Новый Структура();
	МоделиВосстановления.Вставить("Простая"                    , "SIMPLE");
	МоделиВосстановления.Вставить("Полная"                     , "FULL");
	МоделиВосстановления.Вставить("МинимальноеПротоколирование", "BULK_LOGGED");

	Возврат Новый ФиксированнаяСтруктура(МоделиВосстановления);

КонецФункции // ВариантыСообщенияОСуществованииБД()

#КонецОбласти // СлужебныеПроцедурыИФункции

#Область ОбработчикиСобытий

// Процедура - обработчик события "ПриСозданииОбъекта"
//
// Параметры:
//   _Сервер          - Строка    - адрес сервера СУБД
//   _Пользователь    - Строка    - пользователь сервера СУБД
//   _Пароль          - Строка    - пароль пользователя сервера СУБД
//
Процедура ПриСозданииОбъекта(Знач _Сервер, Знач _Пользователь, Знач _Пароль) Экспорт
	
	Сервер       = _Сервер;
	Пользователь = _Пользователь;
	Пароль       = _Пароль;
	
	Лог = ПараметрыСистемы.Лог();

КонецПроцедуры // ПриСозданииОбъекта()

#КонецОбласти // ОбработчикиСобытий
