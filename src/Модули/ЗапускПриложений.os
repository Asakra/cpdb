#Использовать readparams

// Добавляет к строке отрывающую и закрывающую кавычки при их отсутствии
//   
// Параметры:
//   Строка 	- Строка - Строка для обработки
//
// Возвращаемое значение:
//		Строка	- Обработанная строка
//
Функция ОбернутьВКавычки(Знач Строка) Экспорт
	
	Если Лев(Строка, 1) = """" И Прав(Строка, 1) = """" Тогда
		Возврат Строка;
	Иначе
		Возврат """" + Строка + """";
	КонецЕсли;

КонецФункции // ОбернутьВКавычки()

// Функция подготавливает конфигуратор 1С для выполнения в режиме командной строки
//   
// Параметры:
//   СтрокаПодключения 				- Строка - строка подключения к базе 1С
//   ИмяПользователя 				- Строка - имя пользователя базы 1С
//   ПарольПользователя 			- Строка - пароль пользователя базы 1С
//   ИспользуемаяВерсияПлатформы 	- Строка - маска версии 1С
//
// Возвращаемое значение:
//		Строка	- Обработанная строка
//
Функция НастроитьКонфигуратор(СтрокаПодключения
							, ИмяПользователя = Неопределено
							, ПарольПользователя = Неопределено
							, ИспользуемаяВерсияПлатформы = Неопределено) Экспорт
	
	Конфигуратор = Новый УправлениеКонфигуратором;

	КаталогСборки = КаталогВременныхФайлов();

	Конфигуратор.КаталогСборки(КаталогСборки);

	Если ЗначениеЗаполнено(СтрокаПодключения) Тогда
		Конфигуратор.УстановитьКонтекст(СтрокаПодключения, ИмяПользователя, ПарольПользователя);
	КонецЕсли;

	Если НЕ ИспользуемаяВерсияПлатформы = Неопределено Тогда
		Конфигуратор.ИспользоватьВерсиюПлатформы(ИспользуемаяВерсияПлатформы);
	КонецЕсли;

	Возврат Конфигуратор;

КонецФункции // НастроитьКонфигуратор()

// Функция поиска архиватора
//
// Возвращаемое значение:
//	Строка	- Путь к архиватору 7zip
//
Функция Найти7ZIP() Экспорт

	// Предполагаем, что для X64_86 7-Zip будет 64-битный
	КаталогПрограмм = "C:\" + "Program Files";
	ИмяИсполняемогоФайла = "7z.exe";

	Массив7ZIP = НайтиФайлы(КаталогПрограмм, ИмяИсполняемогоФайла, True);

	Если Массив7ZIP.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Массив7ZIP[0].ПолноеИмя;
	КонецЕсли;

КонецФункции // Найти7ZIP()

// Выполняет чтение параметров из списка JSON-файлов
//   
// Параметры:
//   ФайлыПараметров 	- Строка		- Список путей к JSON-файлам параметров, разделенных ";"
//   ПараметрыКоманды 	- Соответствие	- Соответствие 
//   ОшибкиЧтения	 	- Соответствие	- Ошибки чтения параметров
//
// Возвращаемое значение:
//   Соответствие - Параметры указанные в файлах (Ключ - Имя параметра, Значение - значение параметра)
//
Процедура ПрочитатьПараметрыКомандыИзФайла(ФайлыПараметров, ПараметрыКоманды, ОшибкиЧтения = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ФайлыПараметров) Тогда
		Возврат;
	КонецЕсли;
	
	МассивФайловПараметров = Новый Массив;
	МассивФайловПараметров.Добавить(Неопределено);

	Для Каждого ТекФайл Из СтрРазделить(ФайлыПараметров, ";") Цикл
		МассивФайловПараметров.Добавить(ТекФайл);
	КонецЦикла;

	Параметры = ЧтениеПараметров.Прочитать(МассивФайловПараметров, ОшибкиЧтения);
	
	Для Каждого	ТекПараметр Из Параметры Цикл
		Если ПараметрыКоманды.Получить(ТекПараметр.Значение) = Неопределено Тогда
			ПараметрыКоманды.Вставить(ТекПараметр.Ключ, ТекПараметр.Значение);
		КонецЕсли;
	КонецЦикла;	

КонецПроцедуры // ПрочитатьПараметрыКомандыИзФайла()
	
