#Использовать json

Перем ГлобальныйЧтениеJSON;
Перем Лог;

// Читает сценарии из переданного объекта
//
// Параметры:
//  ФайлыСценариев	  - Строка, Файл, Массив,			- перечень путей к файлу или файлов
//						 Структура, Соответствие		 из которых нужно прочитать параметры
//
// Возвращаемое значение:
//   Соответствие   - Параметры, прочитанные в соответствие
//
Функция ПрочитатьСценарии(Знач ФайлыСценариев = Неопределено) Экспорт
	
	МассивПутейКСценариям = СтрРазделить(ФайлыСценариев, ";");

	МассивФайловДляЧтения = Новый Массив;

	ПрочитатьОбъектСФайламиРекурсивно(МассивПутейКСценариям, массивФайловДляЧтения);

	ГлобальныйЧтениеJSON = Новый ПарсерJSON;
	ПрочитанныеСценарии = Новый Массив;

	Для каждого цИмяФайл Из МассивФайловДляЧтения Цикл
		
		Сценарий = ПрочитатьФайл(цИмяФайл);

		Если НЕ ЗначениеЗаполнено(Сценарий) Тогда
			ВызватьИсключение СтрШаблон("Не удалось прочитать файл ""%1""", цИмяФайл);
		КонецЕсли;

		ПрочитанныеСценарии.Добавить(Новый Структура("ПутьКФайлу, Сценарий", цИмяФайл, Сценарий));
		
	КонецЦикла;

	Возврат ПрочитанныеСценарии;	
	
КонецФункции // ПрочитатьСценарии()

Процедура ПрочитатьОбъектСФайламиРекурсивно(Знач ОбъектЧтения, МассивПрочитанныхЗначений)
	
	Если ТипЗнч(ОбъектЧтения) = Тип("Строка") Тогда

		ДобавитьВМассив(МассивПрочитанныхЗначений, ОбъектЧтения);

	ИначеЕсли ТипЗнч(ОбъектЧтения) = Тип("Файл") Тогда

		ДобавитьВМассив(МассивПрочитанныхЗначений, ОбъектЧтения.ПолноеИмя);

	ИначеЕсли ТипЗнч(ОбъектЧтения) = Тип("Массив") Тогда

		Для каждого цЭлемент Из ОбъектЧтения Цикл
			ПрочитатьОбъектСФайламиРекурсивно(цЭлемент, МассивПрочитанныхЗначений);
		КонецЦикла;

	ИначеЕсли ТипЗнч(ОбъектЧтения) = Тип("Структура")
		ИЛИ ТипЗнч(ОбъектЧтения) = Тип("Соответствие") Тогда

		Для каждого цЭлемент Из ОбъектЧтения Цикл
			ПрочитатьОбъектСФайламиРекурсивно(цЭлемент.Значение, МассивПрочитанныхЗначений);
		КонецЦикла;

	ИначеЕсли Не ЗначениеЗаполнено(ОбъектЧтения) Тогда

		Для каждого цЭлемент Из НайтиФайлы(ПапкаПоискаПоУмолчанию(), МаскаПоискаФайлаПоУмолчанию(), Ложь) Цикл
			ПрочитатьОбъектСФайламиРекурсивно(цЭлемент, МассивПрочитанныхЗначений);
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры // ПрочитатьОбъектСФайламиРекурсивно()

Процедура ДобавитьВМассив(ИзменяемыйМассив, Знач Значение, Знач ТолькоУникальныеЗначения = Истина)
	
	Если ТолькоУникальныеЗначения Тогда
		
		Если ИзменяемыйМассив.Найти(Значение) = Неопределено Тогда
			ИзменяемыйМассив.Добавить(Значение);
		КонецЕсли;

	Иначе
		ИзменяемыйМассив.Добавить(Значение);
	КонецЕсли;
	
КонецПроцедуры // ДобавитьВМассив()

Функция ПрочитатьФайл(Знач ПолныйПутьКЧитаемомуФайлу)
	
	Лог.Информация("Чтение файла ""%1""", ПолныйПутьКЧитаемомуФайлу);

	Если Не ФайлСуществует(ПолныйПутьКЧитаемомуФайлу) Тогда			
		Лог.Ошибка("Файл ""%1"" не существует.", ПолныйПутьКЧитаемомуФайлу);
		Возврат Неопределено;			
	КонецЕсли;
	
	Попытка
		текстФайла = ПолучитьТекстИзФайла(ПолныйПутьКЧитаемомуФайлу);
	Исключение
		Лог.Ошибка("Не удалось прочитать файл ""%1"": %2", ПолныйПутьКЧитаемомуФайлу, ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	Попытка
		текстФайлаБезКомментариев = ВырезатьКомментарии(текстФайла);
		параметрыИзФайла = ГлобальныйЧтениеJSON.ПрочитатьJSON(текстФайлаБезКомментариев, , , Истина);
	Исключение
		Лог.Ошибка("Ошибка чтения JSON из файла ""%1"": %2", ПолныйПутьКЧитаемомуФайлу, ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;

	ОбработатьПараметрыРекурсивно(параметрыИзФайла, ПолныйПутьКЧитаемомуФайлу);
	
	Возврат параметрыИзФайла;

КонецФункции // ПрочитатьФайл()

Процедура ОбработатьПараметрыРекурсивно(Знач ОбрабатываемыеПараметры, Знач ПолныйПутьКЧитаемомуФайлу)
	
	ИзменяемыеПараметры = Новый Соответствие();

	Для каждого ТекПараметр Из ОбрабатываемыеПараметры Цикл

		Если ТипЗнч(ТекПараметр.Значение) = Тип("Строка") Тогда
			
			НовоеЗначение = ПрочитатьФайлИзЗначенияПараметра(ТекПараметр.Значение, ПолныйПутьКЧитаемомуФайлу);
			Если НЕ НовоеЗначение = ТекПараметр.Значение Тогда
				ИзменяемыеПараметры.Вставить(ТекПараметр.Ключ, НовоеЗначение);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТипЗнч(ТекПараметр.Значение) = Тип("Структура")
			ИЛИ ТипЗнч(ТекПараметр.Значение) = Тип("Соответствие") Тогда
			
			ОбработатьПараметрыРекурсивно(ТекПараметр.Значение, ПолныйПутьКЧитаемомуФайлу);
			
		КонецЕсли;

	КонецЦикла;
	
	Если ТипЗнч(ОбрабатываемыеПараметры) = Тип("Структура")
		ИЛИ ТипЗнч(ОбрабатываемыеПараметры) = Тип("Соответствие") Тогда
		Для Каждого ТекПараметр Из ИзменяемыеПараметры Цикл
			ОбрабатываемыеПараметры.Вставить(ТекПараметр.Ключ, ТекПараметр.Значение);
		КонецЦикла;			
	КонецЕсли;

КонецПроцедуры // ОбработатьПараметрыРекурсивно()

Функция ПрочитатьФайлИзЗначенияПараметра(Знач Значение, Знач ПолныйПутьКРодительскомуФайлу = "")
	
	Если Не СтрНачинаетсяС(ВРег(Значение), ВРег(Префикс_ПрочитатьФайл())) Тогда
		Возврат Значение;
	КонецЕсли;
	
	Значение = Сред(Значение, СтрДлина(Префикс_ПрочитатьФайл()) + 1);

	Если СтрНачинаетсяС(Значение, ".")
		И Не ПолныйПутьКРодительскомуФайлу = "" Тогда
		
		Файл = Новый Файл(ПолныйПутьКРодительскомуФайлу);
		ПутьКФайлу = ОбъединитьПути(файл.Путь, Значение);
		
	Иначе

		ПутьКФайлу = Значение;

	КонецЕсли;
	
	Возврат ПрочитатьФайл(ПутьКФайлу);
	
КонецФункции // ПрочитатьФайлИзЗначенияПараметра()

Функция Префикс_ПрочитатьФайл()

	Возврат "scen://";

КонецФункции // Префикс_ПрочитатьФайл()

Функция ПапкаПоискаПоУмолчанию()

	Возврат ТекущийКаталог();

КонецФункции

Функция МаскаПоискаФайлаПоУмолчанию()

	Возврат "scen*.json";

КонецФункции // МаскаПоискаФайлаПоУмолчанию()

Функция ФайлСуществует(Знач ПутьКФайлу)
	
	Файл = Новый Файл(ПутьКФайлу);
	Возврат Файл.Существует() И Файл.ЭтоФайл();

КонецФункции // ФайлСуществует()

Функция ПолучитьТекстИзФайла(Знач ПарамИмяФайла)
	
	ПрочитанныйТекст = "";
	ЧтениеТекста = Новый ЧтениеТекста(ПарамИмяФайла, КодировкаТекста.UTF8);
	ПрочитанныйТекст = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();

	Возврат ПрочитанныйТекст;

КонецФункции // ПолучитьТекстИзФайла()

// Удаляет все комментарии // и блоки /* */
//
Функция ВырезатьКомментарии(Знач ОбрабатываемыйТекст)
	
	РегулярноеВыражение = Новый РегулярноеВыражение( "(@(?:""[^""]*"")+|""(?:[^""\n\\]+|\\.)*""|'(?:[^'\n\\]+|\\.)*')|//.*|/\*(?s:.*?)\*/" );
	
	ЗначениеБезКомментариев = РегулярноеВыражение.Заменить(ОбрабатываемыйТекст, "$1" );

	Возврат ЗначениеБезКомментариев;

КонецФункции // ВырезатьКомментарии()

Лог = Логирование.ПолучитьЛог("ktb.app.cpdb");